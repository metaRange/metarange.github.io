---
import { Code, Tabs, TabItem, Aside, Card, Icon, LinkCard } from '@astrojs/starlight/components';
import "../styles/drawflow.min.css";
import { glossary } from "../data/glossary.ts";
const glossaryJson = JSON.stringify(glossary);
---
<script type="application/json" id="glossary-data" set:html={glossaryJson}></script>

<div class="visual-scripting-container">
    <div class="vs-mobile-overlay">
        Please visit the desktop site to try the visual editor
    </div>
    <div class="vs-menu-bar">
         <div class="vs-menu-dropdown">
            <div
                class="vs-menu-btn vs-menu-item species-node draggable"
                draggable="true"
                title="Add species node"
                data-node-type="species"
            >
                Species
            </div>
        </div>
        <div class="vs-menu-dropdown env-menu">
            <button class="vs-menu-btn" title="Add environment nodes">Environment</button>
            <div class="vs-menu-dropdown-content">
                <div
                    class="vs-menu-item env-node draggable"
                    draggable="true"
                    data-node-type="temperature"
                >
                    Temperature
                </div>
                <div
                    class="vs-menu-item env-node draggable"
                    draggable="true"
                    data-node-type="precipitation"
                >
                    Precipitation
                </div>
                <div
                    class="vs-menu-item env-node draggable"
                    draggable="true"
                    data-node-type="resource"
                >
                    Resource
                </div>
                <div
                    class="vs-menu-item env-node draggable"
                    draggable="true"
                    data-node-type="custom_env"
                >
                    Custom 
                </div>
            </div>
        </div>
        <div class="vs-menu-dropdown trait-menu">
            <button class="vs-menu-btn" title="Add trait nodes">Traits</button>
            <div class="vs-menu-dropdown-content">
                <div
                    class="vs-menu-item trait-node draggable"
                    draggable="true"
                    data-node-type="abundance"
                >
                    Abundance
                </div>
                <div
                    class="vs-menu-item trait-node draggable"
                    draggable="true"
                    data-node-type="reproduction_rate"
                >
                    Reproduction Rate
                </div>
                <div
                    class="vs-menu-item trait-node draggable"
                    draggable="true"
                    data-node-type="survival_rate"
                >
                    Survival Rate
                </div>
                <div
                    class="vs-menu-item trait-node draggable"
                    draggable="true"
                    data-node-type="carrying_capacity"
                >
                    Carrying Capacity
                </div>
                <div
                    class="vs-menu-item trait-node draggable"
                    draggable="true"
                    data-node-type="dispersal_distance"
                >
                    Dispersal Distance
                </div>
                <div
                    class="vs-menu-item trait-node draggable"
                    draggable="true"
                    data-node-type="environmental_preferences_temperature"
                >
                    Env. Preferences Temperature
                </div>
                <div
                    class="vs-menu-item trait-node draggable"
                    draggable="true"
                    data-node-type="environmental_preferences_precipitation"
                >
                    Env. Preferences Precipitation
                </div>
                <div
                    class="vs-menu-item trait-node draggable"
                    draggable="true"
                    data-node-type="environmental_preferences_resource"
                >
                    Env. Preferences Rescource
                </div>
                <div
                    class="vs-menu-item trait-node draggable"
                    draggable="true"
                    data-node-type="environmental_preferences_custom"
                >
                    Env. Preferences Custom
                </div>
                <div
                    class="vs-menu-item trait-node draggable"
                    draggable="true"
                    data-node-type="mass"
                >
                    Mass
                </div>
                <div
                    class="vs-menu-item trait-node draggable"
                    draggable="true"
                    data-node-type="suitability"
                >
                    Suitability (0-1)
                </div>
            </div>
        </div>
        <div class="vs-menu-dropdown proc-menu">
            <button class="vs-menu-btn" title="Add Process nodes">Processes</button>
            <div class="vs-menu-dropdown-content">
                <div
                    class="vs-menu-item proc-node draggable"
                    draggable="true"
                    data-node-type="reproduction"
                >
                    Reproduction Ricker
                </div>
                <div
                    class="vs-menu-item proc-node draggable"
                    draggable="true"
                    data-node-type="reproductionBV"
                >
                    Reproduction Beverton-Holt
                </div>
                <div
                    class="vs-menu-item proc-node draggable"
                    draggable="true"
                    data-node-type="mortality"
                >
                    Mortality
                </div>

                <div
                    class="vs-menu-item proc-node draggable"
                    draggable="true"
                    data-node-type="dispersal"
                >
                    Dispersal
                </div>
                <div
                    class="vs-menu-item proc-node draggable"
                    draggable="true"
                    data-node-type="calculate_suitability"
                >
                    Calculate Suitability
                </div>
                <div
                    class="vs-menu-item proc-node draggable"
                    draggable="true"
                    data-node-type="metabolic_scaling"
                >
                    Metabolic Scaling
                </div>

                <div
                    class="vs-menu-item proc-node save draggable"
                    draggable="true"
                    data-node-type="save"
                >
                    Save
                </div>
                <div
                    class="vs-menu-item proc-node draggable"
                    draggable="true"
                    data-node-type="plot"
                >
                    Plot
                </div>
                <div 
                    class="vs-menu-item proc-node draggable"
                    draggable="true"
                    data-node-type="mult"
                >
                    Multiply With
                </div>
            </div>
        </div>
        <div class="placeholder"></div>
        <div class="vs-menu">
            <button id="vs-help" class="vs-menu-btn vs-help" title="Open help">Help</button>
            <div class="vs-menu-dropdown">    
                <button class="vs-menu-btn" title="Save current node configuration">Save</button>
                <div class="vs-menu-dropdown-content">
                    <div id="vs-quicksave" class="vs-menu-item clickable quicksave">Quicksave</div>
                    <div id="vs-export" class="vs-menu-item clickable json-export" data-status="" title="Copy node configuration as JSON to clipboard">Copy JSON to clipboard</div>
                </div>
            </div>
            <div class="vs-menu-dropdown">    
                <button class="vs-menu-btn" title="Load a saved node configuration">Load</button>
                <div class="vs-menu-dropdown-content vs-load-menu">
                    <div class="vs-menu-item clickable vs-example1">Simple Example</div>
                    <div class="vs-menu-item clickable vs-example2">Complex Example</div>
                    <div id="load-json" class="vs-menu-item clickable">From JSON</div>
                </div>
            </div>
            <button class="vs-menu-btn vs-clear" title="Clear editor">Clear</button>
        </div>
    </div>
    <div id="drawflow-area" class="drawflow-area">
        <div class="drawflow-time-bg"></div>
        <div class="drawflow-time-bg"></div>
        <div class="drawflow-time-bg"></div>
        <div class="vs-toggles">
            <button id="vs-code-highlight" class="vs-toggle vs-input-toggle enabled" title="Highlight code of selected node"><Icon name="forward-slash"/></button>
            <button id="vs-code-toggle" class="vs-toggle vs-input-toggle" title="Minmimize / maximize code panel"><Icon name="down-caret"/></button>
            <!-- <button id="vs-input-toggle" class="vs-toggle vs-input-toggle" title="Show / hide inputs"><Icon name="pencil"/></button> -->
            <button id="vs-zoom-in" class="vs-toggle vs-zoom-in" title="Zoom in">+</button>
            <button id="vs-zoom-out" class="vs-toggle vs-zoom-out" title="Zoom out">-</button>
        </div>
        <div class="timestep timestep-start">time step start</div>
        <div class="timestep timestep-end">time step end</div>
    </div>
    <div class="vs-divider" id="vs-divider"></div>
    <div class="code-area" id="code-area">
        <Tabs>
            <TabItem label="Generated Code">
                <Code code={"# Generated Code"} lang="txt" title="simulation.R" />
            </TabItem>
            <TabItem label="Instructions">
                <div class="instructions">
                <code>Left Click + Drag</code> | Move
                <br>
                <code>Right Click</code> | Delete Option
                <br>
                <code>Ctrl + Wheel</code> | Zoom 
                <br>
                <br>
                <Card title="Editor">The node editor represent one time step of the simulation.
                Below the node editor, you can see and copy the code that is generated based on the node configuration.
                </Card>
                <br>
                <Card title="Nodes">Drag menu items to the canvas to add nodes.
                Drag node output to another node input to connect them (works only if they have if they have the same type).
                Species nodes can be connected to traits and trait nodes to processes nodes.
                Each trait node has an option to set its initial value (i.e. at the start of the simulation).
                The trait values are propagated to the connected process nodes and transformed by them.
                At the end of the time step (when a trait is not connected to any more process nodes), its values are propagated to the species node for the next time step.
                </Card>
                <br>
                <Aside type="note">This editor is only meant to give you an idea of how a simulation can be set up.
                The package has many options that are not available in the editor, so feel free to browse the documentation (or the published papers) to see what is possible.
                </Aside>
                </div>
            </TabItem>
            <TabItem label="Node Info">
                <div id="node-info-panel">
                    <Card title="Information">Click on any node to see more information.
                    </Card>
                    <br/>
                    <LinkCard
                        title="See also"
                        href="/glossary"
                        description="See glossary for more information on terms used in the node descriptions."
                    />
            </TabItem>
        </Tabs>

    </div>
</div>

<style is:global>
    code span {
        transition: all 0.5s;
    }
    .highlight {
        background-color: var(--sl-color-accent-high);
        text-shadow: var(--sl-color-accent-low) 1px 1px 2px;
    }
    :root {
        --vs-env-bg: #5b172d;
        --vs-env-bg-hover: #772d44;
        --vs-text-color: #eeeeee;
        --vs-text-color-hover: #ffffff;
        --vs-species-bg: #004f68;
        --vs-species-bg-hover: #386b88;
        --vs-proc-bg: #62848e;
        --vs-proc-bg-hover: #859ba1;
        --vs-trait-bg: #9f8664;
        --vs-trait-bg-hover: #a29079;
        --vs-proc-title-bg-hover: #445c63;
        --vs-node-title-bg-hover: #716451;
        --vs-menu-border: black;
        --vs-transition-time: 0.1s;
        --menu-gap-width: 0.2rem;
    }
    :root[data-theme='light'] {
        --vs-env-bg: #741433;
        --vs-env-bg-hover: #933d4d;
        --vs-species-bg: #0a6582;
        --vs-species-bg-hover: #257894;
        --vs-proc-bg: #6ea3b3;
        --vs-proc-bg-hover: #83a6b0;
        --vs-trait-bg: #a6865b;
        --vs-trait-bg-hover: #a29079;
        --vs-proc-title-bg-hover: #445c63;
        --vs-node-title-bg-hover: #716451;
    }
    .timestep {
        position: absolute;
        top: 0;
        width: 2rem;
        height: 100%;

        color: #fff;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1rem;
        font-weight: bold;
        z-index: 10;
        writing-mode: sideways-lr;
        pointer-events: none;
    }
    .timestep.timestep-start {
        left: 0;
    }
    .timestep.timestep-end {
        right: 0;
    }


    .visual-scripting-container,
    .visual-scripting-container * {
        margin-top: 0;
    }
    .vs-menu-bar {
        display: flex;
        width: 100%;
        align-items: stretch;
        flex-direction: column;
        gap: 0;
        padding: 0;
        background: none;
        z-index: 20;
        box-shadow: 0 2px 8px 0 rgba(70, 130, 180, 0.04);
        margin-top: 0;
    }
    .vs-menu-dropdown,
    .vs-menu-item.species-node {
        display: flex;
        align-items: stretch;
        position: relative;
        min-width: 0;
    }
    .placeholder {
        flex: 1 1 auto;
    }
    .vs-menu-btn {
        width: 100%;
        border: none;
        cursor: pointer;
        transition:
            background var(--vs-transition-time),
            color var(--vs-transition-time);
        display: flex;
        align-items: center;
        padding: 0.5rem;
        text-shadow: var(--sl-shadow-sm);
        border: var(--menu-gap-width) solid var(--sl-color-bg);
        border-top-width: 0;
    }
    .vs-menu-dropdown.env-menu .vs-menu-btn {
        background: var(--vs-env-bg);
        color: var(--vs-text-color);
    }
    .vs-menu-dropdown.env-menu .vs-menu-btn:hover,
    .vs-menu-dropdown.env-menu .vs-menu-btn:focus {
        background: var(--vs-env-bg-hover);
        color: var(--vs-text-color-hover);
    }
    .vs-menu-item.species-node {
        background: var(--vs-species-bg);
        color: var(--vs-text-color);
        border-top-width: var(--menu-gap-width);
        padding-left: 0.5rem;
        margin: 0;
        cursor: grab;
        transition:
            background var(--vs-transition-time),
            color var(--vs-transition-time);
        user-select: none;
    }
    .vs-menu-item.species-node:active {
        cursor: grabbing;
    }
    .vs-menu-item.species-node:hover,
    .vs-menu-item.species-node:focus {
        background: var(--vs-species-bg-hover);
        color: var(--vs-text-color-hover);
    }
    .vs-menu-dropdown.proc-menu .vs-menu-btn {
        background: var(--vs-proc-bg);
        color: var(--vs-text-color);
    }
    .vs-menu-dropdown.proc-menu .vs-menu-btn:hover,
    .vs-menu-dropdown.proc-menu .vs-menu-btn:focus {
        background: var(--vs-proc-bg-hover);
        color: var(--vs-text-color-hover);
    }
    .vs-menu-dropdown.trait-menu .vs-menu-btn {
        background: var(--vs-trait-bg);
        color: var(--vs-text-color);
    }
    .vs-menu-dropdown.trait-menu .vs-menu-btn:hover,
    .vs-menu-dropdown.trait-menu .vs-menu-btn:focus {
        background: var(--vs-trait-bg-hover);
        color: var(--vs-text-color-hover);
    }
    .vs-menu-dropdown-content {
        display: none;
        position: absolute;
        left: 100%;
        top: calc(-1 * var(--menu-gap-width));
        background: var(--sl-color-gray-5);
        padding: 0.5rem;
        min-width: max-content;
        box-shadow: 0 2px 12px rgb(10, 10, 10);
        z-index: -1;
        overflow: hidden;
        border-radius: 0rem 0.5rem 0.5rem 0rem;
        border: var(--menu-gap-width) solid var(--sl-color-bg);
        border-left-width: 0;
    }
    .vs-menu-dropdown:hover .vs-menu-dropdown-content,
    .vs-menu-dropdown:focus-within .vs-menu-dropdown-content {
        display: block;
    }
    .vs-menu-dropdown-content hr {
        margin: 0;
        border: none;
        background: var(--sl-color-gray-5);
        height: var(--menu-gap-width);
    }
    .clickable {
        cursor: pointer;
    }
    .vs-menu-item {
        padding: 0.5rem 1rem;

        user-select: none;
        border-radius: 1rem;

        min-height: 2rem;
        display: flex;
        align-items: center;
        transition:
            background var(--vs-transition-time),
            color var(--vs-transition-time);
    }
    .drawflow {
        cursor: grab;
    }
    .draggable {
        cursor: grab;
    }
    .draggable::after {
        content: "🠞";
        position: relative;
        left: 0;
        font-weight: bold;
        margin-left: auto;
        visibility: hidden;
        transition: left 1s;
    }
    .draggable:hover::after {
        visibility: visible;
        left: 0.5rem;
    }
    .vs-menu-item:hover {
        background: var(--sl-color-gray-6);
        color: var(--sl-color-white);
    }
    .drawflow-node {
        transition:
            background var(--vs-transition-time) ease-in-out,
            box-shadow var(--vs-transition-time) ease-in-out;
        font-size: var(--sl-text-code);
    }
    .drawflow-node::before {
        position: absolute;
        content: '';
    }
    .drawflow-node:hover::before {
        position: absolute;
        content: attr(data-vs-species-name, '');
        border-radius: 0.4rem 0.4rem 0 0;
        width: 100%;
        padding-left: 0.5rem;
        background: var(--vs-node-title-bg-hover);
        color: #fff;
        text-shadow: black 1px 1px 2px;
    }
    .drawflow-node.species-node:hover::before {
        content: '';
    }
    .drawflow-node.proc-node:hover::before {
        background: var(--vs-proc-title-bg-hover);
    }

    .drawflow_content_node .title {
        padding-left: 0.5rem;
        padding-right: 0.5rem;
        border-bottom: 1px solid var(--dfBorderColor);
        background: rgba(0, 0, 0, 0.3);
        border-radius: 0.4rem 0.4rem 0 0;

        text-shadow: black 1px 1px 2px;
        color: #ececec;
    }

     .drawflow-node[data-vs-species-name] .input:not([data-upstream-connected="true"],[data-vs-optional="true"],[env_type]) {
        background: #aa7a57 !important;
    }
    .drawflow-node .input[data-vs-optional="true"] {
        background: grey;
    }

    .drawflow-node.trait-node:not([data-upstream-connected="true"]),
    .drawflow-node.proc-node:not([data-upstream-connected="true"]) {
        background: grey !important;

    }
    #drawflow .drawflow-node.env-node {
        background: var(--vs-env-bg);
    }
    #drawflow .drawflow-node.env-node:hover {
        background: var(--vs-env-bg-hover);
    }

    #drawflow .drawflow-node.species-node {
        background: var(--vs-species-bg);
    }
    #drawflow .drawflow-node.species-node:hover {
        background: var(--vs-species-bg-hover);
    }
    #drawflow .drawflow-node.proc-node {
        background: var(--vs-proc-bg);
    }
    #drawflow .drawflow-node.proc-node:hover {
        background: var(--vs-proc-bg-hover);
    }

    .drawflow-node .input::after,
    .drawflow-node .output::after {
        content: '';
        position: relative;
        pointer-events: none;
    }
    #drawflow .drawflow-node.proc-node:not(.save) .input::after {
        display: block;
        content: attr(data-vs-input-classes, '');

        top: -2px;
        left: 25px;
        height: 16px;
        line-height: 16px;
        font-size: 0.8rem;
        width: 150px;
    }
    #drawflow .drawflow-node .output:hover::after {
        display: block;
        content: attr(data-vs-output-classes, '');

        top: -2px;
        left: 25px;
        height: 16px;
        line-height: 16px;
        font-size: 0.8rem;
    }

     .drawflow .drawflow-node .inputs, .drawflow .drawflow-node .outputs {
        padding-top: calc(var(--sl-line-height) * var(--sl-text-body) + 0.5rem);
     }

     .drawflow .input-container {
        padding: 0.5rem 1rem;
                width: 100%;
     }

    .drawflow .drawflow-node .input.species-traits,
    .drawflow .drawflow-node .input.species-traits:hover,
    .drawflow .drawflow-node .input.species-traits.selected,
    .drawflow .drawflow-node .output.species-traits,
    .drawflow .drawflow-node .output.species-traits:hover,
    .drawflow .drawflow-node .output.species-traits.selected {
            border-radius: 4px;
    }


    .drawflow .input-container input,
    .drawflow .input-container select {

        margin-right: 0.5rem;
        margin-bottom: 0.5rem;
        padding: 1px 2px;
        /* color: #ddd; */
    }

    .drawflow .input-container > :last-child,
    .drawflow .input-container > p:last-child input,
    .drawflow .input-container > p:last-child select {
        margin-bottom: 0;
    }


    @media (max-width: 600px) {
        .vs-menu-bar {
            flex-direction: column;
        }
        .vs-menu-dropdown,
        .vs-menu-item.species-node {
            min-width: 0;
        }
    }
    .vs-mobile-overlay {
        display: none;
    }
    @media (max-width: 600px) {
        .visual-scripting-container > *:not(.vs-mobile-overlay) {
            pointer-events: none !important;
            user-select: none !important;
            opacity: 0.2;
            filter: blur(2px);
        }
        .vs-mobile-overlay {
            display: flex;
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(30, 30, 30, 0.98);
            color: #fff;
            z-index: 10000;
            align-items: center;
            justify-content: center;
            font-size: 1.3rem;
            font-weight: 600;
            text-align: center;
            border-radius: 12px;
        }
    }
    input, select {
        border-radius: 3px;
        border: none;
        min-height: 1.6rem;
    }
    input:invalid {
        background-color: rgb(70, 59, 59);
    }

    input + span {
        padding-right: 30px;
    }

    input:invalid + span::after {
        position: absolute;
        content: "✖";
        padding-left: 5px;
    }

    input:valid + span::after {
        position: absolute;
        content: "✓";
        padding-left: 5px;
    }

    .hidden {
        display: none !important;
    }
</style>
<style>
    .visual-scripting-container {
        transition: all 0.5s;
        flex: 1 1 auto;
        display: grid;
        grid-template-columns: max-content 1fr;
        grid-template-rows: 1fr 7px 1fr;
        grid-template-areas:
            "a b"
            "c c"
            "d d";
        overflow: hidden;
        background: var(--sl-color-bg);
        position: relative;
        max-height: calc(100vh - var(--sl-nav-height) - var(--sl-line-height-headings) * 1rem - var(--sl-line-height) * 1rem - 0.1rem);
    }
    .vs-menu-label {
        font-weight: bold;
        color: var(--vs-menu-border);
        font-size: 1rem;
        padding: 0 0.5rem;
    }
    .vs-menu-dropdown {
        position: relative;
        display: inline-block;
    }
    .vs-menu-dropdown:hover .vs-menu-dropdown-content,
    .vs-menu-dropdown:focus-within .vs-menu-dropdown-content {
        display: block;
    }
    .vs-menu-item:active {
        cursor: grabbing;
    }

    .drawflow-area {
        flex: none;
        border-bottom: none;
        position: relative;
        overflow: hidden;
    }
    .vs-divider {
        height: 7px;
        background: var(--sl-color-gray-5);
        width: 100%;
        position: relative;
        grid-area: c;
        border-top: 1.5px solid var(--vs-menu-border);
        border-bottom: 1.5px solid var(--vs-menu-border);
        transition: background 0.15s;
        flex: 0 0 auto;
    }
    .code-area {
        grid-area: d;
        background: var(--sl-color-bg);
        padding: 1.5rem;
        overflow: auto;
        display: flex;
        flex-direction: column;
        border-top: none;
        transition: height 0.1s;
        box-sizing: border-box;
        max-height: 40vh;
    }
    .code-area code {
        font-family: monospace;
    }
    .code-area pre {
        height: 100%;
        width: 100%;
        min-height: 0;
        overflow: auto;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
     .vs-menu {
        display: flex;
        flex-direction: column;
     }
    .vs-toggles {
        position: absolute;
        right: 0;
        bottom: 0;
        z-index: 19;
        display: flex;
        flex-direction: row;
        gap: 0.5rem;
        padding: 0 0.5rem 0.5rem 0.5rem;
        pointer-events: none;
    }
    .vs-toggle {
        display: flex;
        align-items: center;
        justify-content: center;
        pointer-events: all;
        z-index: 20;
        background: rgba(0, 0, 0, 0.2);
        color: var(--sl-color-text);
        border: 2px solid var(--sl-color-gray-3);
        border-radius: 0.5rem;
        width: 2.5rem;
        height: 2.5rem;
        font-size: 1rem;
        font-weight: 600;
        cursor: pointer;
        transition:
            background 0.15s,
            color 0.15s;
        backdrop-filter: blur(2px);
    }
    .vs-toggle:hover {
        background: var(--sl-color-gray-4);

    }
    #vs-code-toggle {
        transition: all 0.5s;
    }
    #vs-code-toggle.small {
        rotate: 180deg;
    }
    #vs-code-highlight::after {
        content: attr(data-hint);
        width: max-content;
        font-size: 0.7rem;
        color: var(--sl-color-gray-3);
        position: absolute;
        top: -2rem;
    }
    #vs-code-highlight.enabled {
        background: var(--sl-color-accent-high);
        border-color: var(--sl-color-accent);
    }
    #vs-code-highlight.enabled:hover {
        background: var(--sl-color-gray-4);
        border-color: var(--sl-color-accent);
    }
</style>
<script src="/scripts/modules/drawflow.min.js" is:inline></script>
<script is:inline>
    window.addEventListener("DOMContentLoaded", () => {
        async function copyToClipboard(input, elem) {
            try {
                if (typeof input !== "string") return;
                if (!navigator.clipboard) throw new Error("Clipboard API not available");
                if (!elem) throw new Error("No element provided");
                 
                await navigator.clipboard.writeText(input);
                const oldText = elem.textContent;
                const elemWidth = elem.offsetWidth;
                elem.style.width = `${elemWidth}px`;
                elem.textContent = "Copied!";
                setTimeout(() => {
                    elem.textContent = oldText;
                    elem.style.width = null;
                }, 2000);
            } catch (err) {
                const oldText = elem.textContent;
                elem.textContent = "Failed";
                setTimeout(() => {
                    elem.textContent = oldText;
                }, 2000);
            }
        }
        const drawflowAreaContainer = document.getElementById("drawflow-area");
        let drawflowContainer;
        if (!document.getElementById("drawflow")) {
            drawflowContainer = document.createElement("div");
            drawflowContainer.id = "drawflow";
            drawflowContainer.style.width = "100%";
            drawflowContainer.style.height = "100%";
            drawflowAreaContainer.appendChild(drawflowContainer);
        }
        drawflowContainer = document.getElementById("drawflow");
        const codeOutputElem = document.querySelector("#code-area code");
        var editor;
        const storage = new Map();
        storage.set("example1",
{
    "drawflow": {
        "Home": {
            "data": {
                "37": {
                    "id": 37,
                    "name": "Species",
                    "data": {
                        "output_1": {
                            "vsOutputClasses": "traits",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true,
                        "traits": {}
                    },
                    "class": "species-node",
                    "html": "<div class ='title'>Species</div><div class='species-node'><div class=\"input-container\"><input type=\"text\" pattern=\"^[a-zA-Z]+[a-zA-Z0-9._]*$\" data-vs-species-name placeholder=\"species_name\"><span class=\"validity\"></span><p>(unique and valid R variable name)</p></div></div>",
                    "typenode": false,
                    "inputs": {},
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "41",
                                    "output": "input_1"
                                },
                                {
                                    "node": "39",
                                    "output": "input_1"
                                },
                                {
                                    "node": "40",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 15,
                    "pos_y": 65
                },
                "39": {
                    "id": 39,
                    "name": "Reproduction Rate",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "traits",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "reproduction_rate",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true
                    },
                    "class": "trait-node",
                    "html": "<div class ='title'>Reproduction Rate</div><div class='input-container'><p><input type=\"number\" step=\"0.1\" name=\"reproduction_rate\" min=\"0\" max=\"1.5\" value=\"0.5\"/>initial value</p></div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "37",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "44",
                                    "output": "input_2"
                                }
                            ]
                        }
                    },
                    "pos_x": 317,
                    "pos_y": 92
                },
                "40": {
                    "id": 40,
                    "name": "Carrying Capacity",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "traits",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "carrying_capacity",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true
                    },
                    "class": "trait-node",
                    "html": "<div class ='title'>Carrying Capacity</div><div class='input-container'><p><input type=\"number\" name=\"carrying_capacity\" min=\"10\" max=\"1000\" value=\"100\"/>initial value</p></div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "37",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "43",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 314,
                    "pos_y": 170
                },
                "41": {
                    "id": 41,
                    "name": "Abundance",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "traits",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "abundance",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true
                    },
                    "class": "trait-node",
                    "html": "<div class ='title'>Abundance</div><div class='input-container'><p><input type=\"number\" name=\"abundance\" min=\"10\" max=\"1000\" value=\"100\"/>initial value</p></div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "37",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "44",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 314,
                    "pos_y": 19
                },
                "42": {
                    "id": 42,
                    "name": "Resource",
                    "data": {
                        "output_1": {
                            "vsOutputClasses": "env_values resource"
                        },
                        "upstreamConnected": true
                    },
                    "class": "env-node",
                    "html": "<div class='title'>Resource (0-1)</div>",
                    "typenode": false,
                    "inputs": {},
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "43",
                                    "output": "input_2"
                                }
                            ]
                        }
                    },
                    "pos_x": 252,
                    "pos_y": 284
                },
                "43": {
                    "id": 43,
                    "name": "Multiply With",
                    "data": {
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true,
                        "priority": 1,
                        "input_2": {
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "vsInputClasses": "env_values resource",
                            "env_type": "resource"
                        },
                        "output_1": {
                            "vsSpeciesName": "Species_fb4521",
                            "vsOutputClasses": "carrying_capacity"
                        },
                        "input_1": {
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "vsInputClasses": "carrying_capacity"
                        }
                    },
                    "class": "proc-node multi-species",
                    "html": "<div class ='title'>Multiply With</div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "40",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_2": {
                            "connections": [
                                {
                                    "node": "42",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "44",
                                    "output": "input_3"
                                }
                            ]
                        }
                    },
                    "pos_x": 531,
                    "pos_y": 154
                },
                "44": {
                    "id": 44,
                    "name": "Reproduction Ricker",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "abundance",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "input_2": {
                            "vsInputClasses": "reproduction_rate",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "input_3": {
                            "vsInputClasses": "carrying_capacity",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "abundance",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "priority": 2,
                        "upstreamConnected": true
                    },
                    "class": "proc-node single-species",
                    "html": "<div class ='title'>Reproduction Ricker</div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "41",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_2": {
                            "connections": [
                                {
                                    "node": "39",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_3": {
                            "connections": [
                                {
                                    "node": "43",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "45",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 708,
                    "pos_y": 60
                },
                "45": {
                    "id": 45,
                    "name": "Plot",
                    "data": {
                        "vsSpeciesName": "Species_fb4521",
                        "priority": 3,
                        "input_1": {
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "vsInputClasses": "abundance"
                        },
                        "upstreamConnected": true
                    },
                    "class": "proc-node",
                    "html": "<div class ='title'>Plot</div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "44",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {},
                    "pos_x": 904,
                    "pos_y": 63
                }
            }
        }
    }
});
        storage.set("example2",
{
    "drawflow": {
        "Home": {
            "data": {
                "37": {
                    "id": 37,
                    "name": "Species",
                    "data": {
                        "output_1": {
                            "vsOutputClasses": "traits",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true,
                        "traits": {}
                    },
                    "class": "species-node",
                    "html": "<div class ='title'>Species</div><div class='species-node'><div class=\"input-container\"><input type=\"text\" pattern=\"^[a-zA-Z]+[a-zA-Z0-9._]*$\" data-vs-species-name placeholder=\"species_name\"><span class=\"validity\"></span><p>(unique and valid R variable name)</p></div></div>",
                    "typenode": false,
                    "inputs": {},
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "41",
                                    "output": "input_1"
                                },
                                {
                                    "node": "39",
                                    "output": "input_1"
                                },
                                {
                                    "node": "40",
                                    "output": "input_1"
                                },
                                {
                                    "node": "46",
                                    "output": "input_1"
                                },
                                {
                                    "node": "48",
                                    "output": "input_1"
                                },
                                {
                                    "node": "49",
                                    "output": "input_1"
                                },
                                {
                                    "node": "47",
                                    "output": "input_1"
                                },
                                {
                                    "node": "60",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 15,
                    "pos_y": 65
                },
                "39": {
                    "id": 39,
                    "name": "Reproduction Rate",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "traits",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "reproduction_rate",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true
                    },
                    "class": "trait-node",
                    "html": "<div class ='title'>Reproduction Rate</div><div class='input-container'><p><input type=\"number\" step=\"0.1\" name=\"reproduction_rate\" min=\"0\" max=\"1.5\" value=\"0.5\"/>initial value</p></div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "37",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "58",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 317,
                    "pos_y": 92
                },
                "40": {
                    "id": 40,
                    "name": "Carrying Capacity",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "traits",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "carrying_capacity",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true
                    },
                    "class": "trait-node",
                    "html": "<div class ='title'>Carrying Capacity</div><div class='input-container'><p><input type=\"number\" name=\"carrying_capacity\" min=\"10\" max=\"1000\" value=\"100\"/>initial value</p></div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "37",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "51",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 311,
                    "pos_y": 236
                },
                "41": {
                    "id": 41,
                    "name": "Abundance",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "traits",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "abundance",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true
                    },
                    "class": "trait-node",
                    "html": "<div class ='title'>Abundance</div><div class='input-container'><p><input type=\"number\" name=\"abundance\" min=\"10\" max=\"1000\" value=\"100\"/>initial value</p></div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "37",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "44",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 314,
                    "pos_y": 19
                },
                "44": {
                    "id": 44,
                    "name": "Reproduction Ricker",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "abundance",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "input_2": {
                            "vsInputClasses": "reproduction_rate",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "input_3": {
                            "vsInputClasses": "carrying_capacity",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "abundance",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "priority": 4,
                        "upstreamConnected": true
                    },
                    "class": "proc-node single-species",
                    "html": "<div class ='title'>Reproduction Ricker</div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "41",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_2": {
                            "connections": [
                                {
                                    "node": "58",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_3": {
                            "connections": [
                                {
                                    "node": "59",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "54",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 1298,
                    "pos_y": 39
                },
                "45": {
                    "id": 45,
                    "name": "Plot",
                    "data": {
                        "priority": 6,
                        "input_1": {
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "vsInputClasses": "abundance"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true
                    },
                    "class": "proc-node",
                    "html": "<div class ='title'>Plot</div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "54",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {},
                    "pos_x": 1699,
                    "pos_y": 126
                },
                "46": {
                    "id": 46,
                    "name": "Mass",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "traits",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "mass",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true
                    },
                    "class": "trait-node",
                    "html": "<div class ='title'>Mass</div><div class='input-container'><p><input type=\"number\" name=\"mass\" min=\"0.01\" max=\"1000\" step=\"0.01\" value=\"1\"/>initial value</p></div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "37",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "51",
                                    "output": "input_2"
                                },
                                {
                                    "node": "58",
                                    "output": "input_2"
                                }
                            ]
                        }
                    },
                    "pos_x": 306,
                    "pos_y": 310
                },
                "47": {
                    "id": 47,
                    "name": "Suitability",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "traits",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "suitability",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true
                    },
                    "class": "trait-node",
                    "html": "<div class ='title'>Suitability (0-1)</div><div class='input-container'><p><input type=\"number\" name=\"suitability\" min=\"0\" max=\"1\" step=\"0.01\" value=\"1\"/>initial value</p></div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "37",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "53",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 306,
                    "pos_y": 388
                },
                "48": {
                    "id": 48,
                    "name": "Env. Preferences Temperature",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "traits",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "env_preferences",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true
                    },
                    "class": "trait-node",
                    "html": "<div class ='title'>Env. Preferences Temperature</div><div class='input-container'><p><input type=\"number\" name=\"max_temperature\" min=\"240\" max=\"320\" value=\"315\" data-nodetype=\"temp\" data-inputtype=\"max\"/>max</p><p><input type=\"number\" name=\"optim_temperature\" min=\"240\" max=\"315\" value=\"280\" data-nodetype=\"temp\" data-inputtype=\"optim\"/>optim</p><p><input type=\"number\" name=\"min_temperature\" min=\"240\" max=\"315\" value=\"244\" data-nodetype=\"temp\" data-inputtype=\"min\"/>min</p></div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "37",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "53",
                                    "output": "input_2"
                                }
                            ]
                        }
                    },
                    "pos_x": 302,
                    "pos_y": 461
                },
                "49": {
                    "id": 49,
                    "name": "Env. Preferences Precipitation",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "traits",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "env_preferences",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true
                    },
                    "class": "trait-node",
                    "html": "<div class ='title'>Env. Preferences Precipitation</div><div class='input-container'><p><input type=\"number\" name=\"max_precipitation\" min=\"0\" max=\"1000\" value=\"780\" data-nodetype=\"prec\" data-inputtype=\"max\"/>max</p><p><input type=\"number\" name=\"optim_precipitation\" min=\"0\" max=\"1000\" value=\"520\" data-nodetype=\"prec\" data-inputtype=\"optim\"/>optim</p><p><input type=\"number\" name=\"min_precipitation\" min=\"0\" max=\"1000\" value=\"380\" data-nodetype=\"prec\" data-inputtype=\"min\"/>min</p></div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "37",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "52",
                                    "output": "input_2"
                                }
                            ]
                        }
                    },
                    "pos_x": 301,
                    "pos_y": 607
                },
                "51": {
                    "id": 51,
                    "name": "Metabolic Scaling",
                    "data": {
                        "input_2": {
                            "vsInputClasses": "mass",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "input_3": {
                            "vsInputClasses": "temperature",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "env_type": "temperature"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true,
                        "priority": 1,
                        "output_1": {
                            "vsSpeciesName": "Species_fb4521",
                            "vsOutputClasses": "carrying_capacity"
                        },
                        "input_1": {
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "vsInputClasses": "carrying_capacity"
                        }
                    },
                    "class": "proc-node single-species",
                    "html": "<div class ='title'>Metabolic Scaling</div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "40",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_2": {
                            "connections": [
                                {
                                    "node": "46",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_3": {
                            "connections": [
                                {
                                    "node": "57",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "59",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 803,
                    "pos_y": 227
                },
                "52": {
                    "id": 52,
                    "name": "Calculate Suitability",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "suitability",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "input_2": {
                            "vsInputClasses": "env_preferences",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "env_type": "precipitation"
                        },
                        "input_3": {
                            "vsInputClasses": "env_values",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "env_type": "precipitation"
                        },
                        "output_1": {
                            "vsOutputClasses": "suitability",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true,
                        "priority": 2
                    },
                    "class": "proc-node single-species",
                    "html": "<div class ='title'>Calculate Suitability</div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "53",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_2": {
                            "connections": [
                                {
                                    "node": "49",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_3": {
                            "connections": [
                                {
                                    "node": "56",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "54",
                                    "output": "input_3"
                                },
                                {
                                    "node": "59",
                                    "output": "input_2"
                                }
                            ]
                        }
                    },
                    "pos_x": 909,
                    "pos_y": 434
                },
                "53": {
                    "id": 53,
                    "name": "Calculate Suitability",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "suitability",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "input_2": {
                            "vsInputClasses": "env_preferences",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "env_type": "temperature"
                        },
                        "input_3": {
                            "vsInputClasses": "env_values",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "env_type": "temperature"
                        },
                        "output_1": {
                            "vsOutputClasses": "suitability",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true,
                        "priority": 1
                    },
                    "class": "proc-node single-species",
                    "html": "<div class ='title'>Calculate Suitability</div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "47",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_2": {
                            "connections": [
                                {
                                    "node": "48",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_3": {
                            "connections": [
                                {
                                    "node": "55",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "52",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 703,
                    "pos_y": 373
                },
                "54": {
                    "id": 54,
                    "name": "Dispersal",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "abundance",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "input_2": {
                            "vsInputClasses": "dispersal_distance",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "input_3": {
                            "vsInputClasses": "suitability",
                            "optional": true,
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "abundance",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "priority": 5,
                        "upstreamConnected": true
                    },
                    "class": "proc-node single-species",
                    "html": "<div class ='title'>Dispersal</div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "44",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_2": {
                            "connections": [
                                {
                                    "node": "60",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_3": {
                            "connections": [
                                {
                                    "node": "52",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "45",
                                    "output": "input_1"
                                }
                            ]
                        }
                    },
                    "pos_x": 1506,
                    "pos_y": 131
                },
                "55": {
                    "id": 55,
                    "name": "Temperature",
                    "data": {
                        "output_1": {
                            "vsOutputClasses": "env_values temperature"
                        },
                        "upstreamConnected": true
                    },
                    "class": "env-node",
                    "html": "<div class='title'>Temperature</div>",
                    "typenode": false,
                    "inputs": {},
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "53",
                                    "output": "input_3"
                                }
                            ]
                        }
                    },
                    "pos_x": 518,
                    "pos_y": 466
                },
                "56": {
                    "id": 56,
                    "name": "Precipitation",
                    "data": {
                        "output_1": {
                            "vsOutputClasses": "env_values precipitation"
                        },
                        "upstreamConnected": true
                    },
                    "class": "env-node",
                    "html": "<div class='title'>Precipitation</div>",
                    "typenode": false,
                    "inputs": {},
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "52",
                                    "output": "input_3"
                                }
                            ]
                        }
                    },
                    "pos_x": 524,
                    "pos_y": 608
                },
                "57": {
                    "id": 57,
                    "name": "Temperature",
                    "data": {
                        "output_1": {
                            "vsOutputClasses": "env_values temperature"
                        },
                        "upstreamConnected": true
                    },
                    "class": "env-node",
                    "html": "<div class='title'>Temperature</div>",
                    "typenode": false,
                    "inputs": {},
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "51",
                                    "output": "input_3"
                                },
                                {
                                    "node": "58",
                                    "output": "input_3"
                                }
                            ]
                        }
                    },
                    "pos_x": 546,
                    "pos_y": 312
                },
                "58": {
                    "id": 58,
                    "name": "Metabolic Scaling",
                    "data": {
                        "input_2": {
                            "vsInputClasses": "mass",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "input_3": {
                            "vsInputClasses": "temperature",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "env_type": "temperature"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "priority": 1,
                        "upstreamConnected": true,
                        "output_1": {
                            "vsSpeciesName": "Species_fb4521",
                            "vsOutputClasses": "reproduction_rate"
                        },
                        "input_1": {
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "vsInputClasses": "reproduction_rate"
                        }
                    },
                    "class": "proc-node single-species",
                    "html": "<div class ='title'>Metabolic Scaling</div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "39",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_2": {
                            "connections": [
                                {
                                    "node": "46",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_3": {
                            "connections": [
                                {
                                    "node": "57",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "44",
                                    "output": "input_2"
                                }
                            ]
                        }
                    },
                    "pos_x": 769,
                    "pos_y": 86
                },
                "59": {
                    "id": 59,
                    "name": "Multiply With",
                    "data": {
                        "vsSpeciesName": "Species_fb4521",
                        "priority": 3,
                        "input_1": {
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "vsInputClasses": "carrying_capacity"
                        },
                        "upstreamConnected": true,
                        "output_1": {
                            "vsSpeciesName": "Species_fb4521",
                            "vsOutputClasses": "carrying_capacity"
                        },
                        "input_2": {
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true,
                            "vsInputClasses": "suitability"
                        }
                    },
                    "class": "proc-node multi-species",
                    "html": "<div class ='title'>Multiply With</div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "51",
                                    "input": "output_1"
                                }
                            ]
                        },
                        "input_2": {
                            "connections": [
                                {
                                    "node": "52",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "44",
                                    "output": "input_3"
                                }
                            ]
                        }
                    },
                    "pos_x": 1067,
                    "pos_y": 217
                },
                "60": {
                    "id": 60,
                    "name": "Dispersal Distance",
                    "data": {
                        "input_1": {
                            "vsInputClasses": "traits",
                            "vsSpeciesName": "Species_fb4521",
                            "upstreamConnected": true
                        },
                        "output_1": {
                            "vsOutputClasses": "dispersal_distance",
                            "vsSpeciesName": "Species_fb4521"
                        },
                        "vsSpeciesName": "Species_fb4521",
                        "upstreamConnected": true
                    },
                    "class": "trait-node",
                    "html": "<div class ='title'>Dispersal Distance</div><div class='input-container'><p><input type=\"number\" name=\"dispersal_distance\" min=\"2\" max=\"20\" value=\"5\"/>initial value</p></div>",
                    "typenode": false,
                    "inputs": {
                        "input_1": {
                            "connections": [
                                {
                                    "node": "37",
                                    "input": "output_1"
                                }
                            ]
                        }
                    },
                    "outputs": {
                        "output_1": {
                            "connections": [
                                {
                                    "node": "54",
                                    "output": "input_2"
                                }
                            ]
                        }
                    },
                    "pos_x": 316,
                    "pos_y": 163
                }
            }
        }
    }
});
        if (drawflowContainer && window.Drawflow) {
            editor = new window.Drawflow(drawflowContainer);
            editor.start();
            editor.import(storage.get("example1"));


            var allNodes = new Set();
            var startNodes = new Set();
            
            function applyDataAfterImport () {
                // loop through every node and call applyNodeData
                const importedNodeIDs = Object.values(editor.drawflow.drawflow[editor.module].data).map(node => node.id);
                importedNodeIDs.forEach((node) => {
                    applyNodeData(node);
                });
                let connnectedNodesImport = new Set();
                for (const nodeId of startNodes) {
                    traverseNodesAndUpdateSpeciesName({node: nodeId, output: "input_1"}, {}, "input_1", connnectedNodesImport);
                }

                let unconnectedNodesImport = new Set(
                    [...allNodes].filter((id) => !connnectedNodesImport.has(id)),
                );

                for (const nodeId of unconnectedNodesImport) {
                    const nodeElement = editor.container.querySelector("#node-" + nodeId);
                    if (nodeElement) {
                        nodeElement.removeAttribute("data-vs-species-name");
                        nodeElement.removeAttribute("data-upstream-connected");
                        editor.drawflow.drawflow[editor.module].data[nodeId].data.vsSpeciesName = undefined;
                        editor.drawflow.drawflow[editor.module].data[nodeId].data.upstreamConnected = false;
                    }
                }
            }
            applyDataAfterImport();     


            const exportButton = document.getElementById("vs-export");
            exportButton.addEventListener("click", () => {
                const exportedData = editor.export();
                copyToClipboard(JSON.stringify(exportedData, null, 4), exportButton)
            });
            const quicksaveButton = document.getElementById("vs-quicksave");
            quicksaveButton.addEventListener("click", () => {
                const exportedData = editor.export();
                const quicksavename = new Date(Date.now()).toLocaleString();
                storage.set(quicksavename, exportedData);
                const loadMenu = document.querySelector(".vs-load-menu");
                const newMenuItem = document.createElement("div");
                newMenuItem.className = "vs-menu-item clickable";
                newMenuItem.textContent = quicksavename;
                newMenuItem.addEventListener("click", () => {
                    editor.clearModuleSelected();
                    allNodes.clear();
                    startNodes.clear();
                    editor.import(storage.get(newMenuItem.textContent));
                    applyDataAfterImport();
                    updateCodePanel();
                });
                loadMenu.prepend(newMenuItem);
                
                quicksaveButton.textContent  = "Saved!";
                setTimeout(() => {
                    quicksaveButton.textContent  = "Quicksave";
                }, 2000);
            });


            const clearButton = document.querySelector(".vs-clear");
            clearButton.addEventListener("click", () => {
                editor.clearModuleSelected();
                allNodes.clear();
                startNodes.clear();
                codeOutputElem.innerHTML = "# Generated code will appear here based on the nodes.";
            });
            const example1Button = document.querySelector(".vs-example1");
            example1Button.addEventListener("click", () => {
                editor.clearModuleSelected();
                allNodes.clear();
                startNodes.clear();
                editor.import(storage.get("example1"));
                applyDataAfterImport();
                updateCodePanel();
            });
            const example2Button = document.querySelector(".vs-example2");
            example2Button.addEventListener("click", () => {
                editor.clearModuleSelected();
                allNodes.clear();
                startNodes.clear();
                editor.import(storage.get("example2"));
                applyDataAfterImport();
                updateCodePanel();
            });

            const loadJsonButton = document.getElementById("load-json");
            loadJsonButton.addEventListener("click", () => {
                const userInput = prompt("Paste the JSON here:");
                if (userInput) {
                    try {
                        const jsonData = JSON.parse(userInput);
                        editor.clearModuleSelected();
                        allNodes.clear();
                        startNodes.clear();
                        editor.import(jsonData);
                        applyDataAfterImport();
                        updateCodePanel();
                    } catch (e) {
                        alert("Invalid JSON.");
                    }
                }
            });




            let nodeConfig = {
                temperature: {
                    name: "Temperature",
                    inputs: 0,
                    outputs: 1,
                    className: "env-node",
                    data: {
                        output_1: {
                            vsOutputClasses: "env_values temperature",
                        },
                        info: "environment"
                    },
                    html: "<div class='title'>Temperature</div>",
                },
                precipitation: {
                    name: "Precipitation",
                    inputs: 0,
                    outputs: 1,
                    className: "env-node",
                    data: {
                        output_1: {
                            vsOutputClasses: "env_values precipitation",
                        },
                        info: "environment"
                    },
                    html: "<div class='title'>Precipitation</div>",
                },
                resource: {
                    name: "Resource",
                    inputs: 0,
                    outputs: 1,
                    className: "env-node",
                    data: {
                        output_1: {
                            vsOutputClasses: "env_values resource",
                        },
                        info: "environment"
                    },
                    html: "<div class='title'>Resource (0-1)</div>",
                },
                custom_env: {
                    name: "Custom Env",
                    inputs: 0,
                    outputs: 1,
                    className: "env-node",
                    data: {
                        output_1: {
                            vsOutputClasses: "env_values",
                        },
                        info: "environment"
                    },
                    html: '<div class="title">Custom Env.</div><div class="input-container"><input type="text" pattern="^[a-z]+[a-z0-9._]*$" data-vs-custom-env-name placeholder="env_name"><span class="validity"></span><p>(unique, lowercase R variable name)</p></div>',
                },
                species: {
                    name: "Species",
                    inputs: 0,
                    outputs: 1,
                    className: "species-node",
                    data: {
                        output_1: {
                            vsOutputClasses: "traits",
                        },
                        info: "species"
                    },
                    html: '<div class =\'title\'>Species</div><div class=\'species-node\'><div class="input-container"><input type="text" pattern="^[a-zA-Z]+[a-zA-Z0-9._]*$" data-vs-species-name placeholder="species_name"><span class="validity"></span><p>(unique and valid R variable name)</p></div></div>',
                },
                reproduction: {
                    name: "Reproduction Ricker",
                    inputs: 3,
                    inputClasses: ["abundance", "reproduction_rate", "carrying_capacity"],
                    outputs: 1,
                    outputClasses: ["abundance"],
                    className: "proc-node single-species",
                    data: {
                        input_1: {
                            vsInputClasses: "abundance",
                        },
                        input_2: {
                            vsInputClasses: "reproduction_rate",
                        },
                        input_3: {
                            vsInputClasses: "carrying_capacity",
                        },
                        output_1: {
                            vsOutputClasses: "abundance",
                        },
                        info: "ricker_model"
                    },
                    html: "<div class =\'title\'>Reproduction Ricker</div>",
                },
                reproductionBV: {
                    name: "Reproduction Beverton-Holt",
                    inputs: 4,
                    inputClasses: ["abundance", "reproduction_rate", "carrying_capacity", "survival_rate"],
                    outputs: 1,
                    outputClasses: ["abundance"],
                    className: "proc-node single-species",
                    data: {
                        input_1: {
                            vsInputClasses: "abundance",
                        },
                        input_2: {
                            vsInputClasses: "reproduction_rate",
                        },
                        input_3: {
                            vsInputClasses: "carrying_capacity",
                        },
                        input_4: {
                            vsInputClasses: "survival_rate",
                        },
                        output_1: {
                            vsOutputClasses: "abundance",
                        },
                        info: "beverton_holt_model"
                    },
                    html: "<div class =\'title\'>Reproduction BvH</div>",
                },
                mortality: {
                    name: "Mortality",
                    inputs: 2,
                    inputClasses: ["abundance", "survival_rate"],
                    outputs: 1,
                    outputClasses: ["abundance"],
                    className: "proc-node single-species",
                    data: {
                        input_1: {
                            vsInputClasses: "abundance",
                        },
                        input_2: {
                            vsInputClasses: "survival_rate",
                        },
                        output_1: {
                            vsOutputClasses: "abundance",
                        },
                        info: "mortality"
                    },
                    html: "<div class =\'title\'>Mortality</div>",
                },
                dispersal: {
                    name: "Dispersal",
                    inputs: 3,
                    outputs: 1,
                    className: "proc-node single-species",
                    data: {
                        input_1: {
                            vsInputClasses: "abundance",
                        },
                        input_2: {
                            vsInputClasses: "dispersal_distance",
                        },
                        input_3: {
                            vsInputClasses: "suitability",
                            optional: true,
                        },
                        output_1: {
                            vsOutputClasses: "abundance",
                        },
                        info: "dispersal"
                    },
                    html: "<div class =\'title\'>Dispersal</div>",
                },
                calculate_suitability: {
                    name: "Calculate Suitability",
                    inputs: 3,
                    inputClasses: ["suitability", "env_preferences", "env_values"],
                    outputs: 1,
                    outputClasses: ["suitability"],
                    className: "proc-node single-species",
                    data: {
                        input_1: {
                            vsInputClasses: "suitability",
                        },
                        input_2: {
                            vsInputClasses: "env_preferences",  
                        },
                        input_3: {
                            vsInputClasses: "env_values",
                        },
                        output_1: {
                            vsOutputClasses: "suitability", 
                        },
                        info: "calculate_suitability"
                    },
                    html: "<div class =\'title\'>Calculate Suitability</div>",
                },
                metabolic_scaling: {
                    name: "Metabolic Scaling",
                    inputs: 3,
                    outputs: 1,
                    className: "proc-node single-species",
                    data: {
                        input_2: {
                            vsInputClasses: "mass",
                        },
                        input_3: {
                            vsInputClasses: "temperature",  
                        },
                        info: "metabolic_scaling"
                    },
                    html: "<div class =\'title\'>Metabolic Scaling</div>",
                },
                save: {
                    name: "Save",
                    inputs: 1,
                    outputs: 0,
                    className: "proc-node save",
                    data: {
                        info: "save"
                    },
                    html: '<div class =\'title\'>Save</div><div class="input-container"><input type="text" id="savepath" name="savepath" required placeholder="[path] default: getwd()" minlength="1" maxlength=260" size="20" /></div>',
                },
                plot: {
                    name: "Plot",
                    inputs: 1,
                    outputs: 0,
                    className: "proc-node",
                    data: {
                        info: "plot"
                    },
                    html: "<div class =\'title\'>Plot</div>",
                },
                mult: {
                    name: "Multiply With",
                    inputs: 2,
                    outputs: 1,
                    className: "proc-node multi-species",
                    data: {
                        info: "multiply",
                    },
                    html: "<div class =\'title\'>Multiply With</div>",
                },
                abundance: {
                    name: "Abundance",
                    inputs: 1,
                    outputs: 1,
                    className: "trait-node",
                    data: {
                        input_1: {
                            vsInputClasses: "traits",
                        },
                        output_1: {
                            vsOutputClasses: "abundance",
                        }
                    },
                    html: '<div class =\'title\'>Abundance</div><div class=\'input-container\'><p><input type="number" name="abundance" min="10" max="1000" value="100"/>initial value</p></div>',
                },
                reproduction_rate: {
                    name: "Reproduction Rate",
                    inputs: 1,
                    outputs: 1,
                    className: "trait-node",
                    data: {
                        input_1: {
                            vsInputClasses: "traits",
                        },
                        output_1: {
                            vsOutputClasses: "reproduction_rate",
                        }
                    },
                    html: '<div class =\'title\'>Reproduction Rate</div><div class=\'input-container\'><p><input type="number" step="0.1" name="reproduction_rate" min="0" max="10" value="0.5"/>initial value</p></div>',
                },
                survival_rate: {
                    name: "Survival Rate",
                    inputs: 1,
                    outputs: 1,
                    className: "trait-node",
                    data: {
                        input_1: {
                            vsInputClasses: "traits",
                        },
                        output_1: {
                            vsOutputClasses: "survival_rate",
                        }
                    },
                    html: '<div class =\'title\'>Survival Rate</div><div class=\'input-container\'><p><input type="number" step="0.1" name="survival_rate" min="0" max="1" value="0.9"/>initial value</p></div>',
                },
                carrying_capacity: {
                    name: "Carrying Capacity",
                    inputs: 1,
                    outputs: 1,
                    className: "trait-node",
                    data: {
                        input_1: {
                            vsInputClasses: "traits",
                        },
                        output_1: {
                            vsOutputClasses: "carrying_capacity",   
                        }
                    },
                    html: '<div class =\'title\'>Carrying Capacity</div><div class=\'input-container\'><p><input type="number" name="carrying_capacity" min="10" max="1000" value="100"/>initial value</p></div>',
                },
                dispersal_distance: {
                    name: "Dispersal Distance",
                    inputs: 1,
                    outputs: 1,
                    className: "trait-node",
                    data: {
                        input_1: {
                            vsInputClasses: "traits",
                        },
                        output_1: {
                            vsOutputClasses: "dispersal_distance",
                        }
                    },
                    html: '<div class =\'title\'>Dispersal Distance</div><div class=\'input-container\'><p><input type="number" name="dispersal_distance" min="2" max="20" value="5"/>initial value</p></div>',
                },
                environmental_preferences_temperature: {
                    name: "Env. Preferences Temperature",
                    inputs: 1,
                    outputs: 1,
                    className: "trait-node",
                    data: {
                        input_1: {
                            vsInputClasses: "traits",
                        },
                        output_1: {
                            vsOutputClasses: "env_preferences",
                        }
                    },
                    html: '<div class =\'title\'>Env. Preferences Temperature</div><div class=\'input-container\'><p><input type="number" name="max_temperature" min="240" max="320" value="315" data-nodetype="temp" data-inputtype="max"/>max</p><p><input type="number" name="optim_temperature" min="240" max="315" value="280" data-nodetype="temp" data-inputtype="optim"/>optim</p><p><input type="number" name="min_temperature" min="240" max="315" value="244" data-nodetype="temp" data-inputtype="min"/>min</p></div>',
                },
                environmental_preferences_precipitation: {
                    name: "Env. Preferences Precipitation",
                    inputs: 1,
                    outputs: 1,
                    className: "trait-node",
                    data: {
                        input_1: {
                            vsInputClasses: "traits",
                        },
                        output_1: {
                            vsOutputClasses: "env_preferences",
                        }
                    },
                    html: '<div class =\'title\'>Env. Preferences Precipitation</div><div class=\'input-container\'><p><input type="number" name="max_precipitation" min="0" max="1000" value="780" data-nodetype="prec" data-inputtype="max"/>max</p><p><input type="number" name="optim_precipitation" min="0" max="1000" value="520" data-nodetype="prec" data-inputtype="optim"/>optim</p><p><input type="number" name="min_precipitation" min="0" max="1000" value="380" data-nodetype="prec" data-inputtype="min"/>min</p></div>',
                },
                environmental_preferences_resource: {
                    name: "Env. Preferences Resource",
                    inputs: 1,
                    outputs: 1,
                    className: "trait-node",
                    data: {
                        input_1: {
                            vsInputClasses: "traits",
                        },
                        output_1: {
                            vsOutputClasses: "env_preferences",
                        }
                    },
                    html: '<div class =\'title\'>Env. Preferences Resource</div><div class=\'input-container\'><p><input type="number" step="0.01" name="max_resource" min="0" max="1" value="0.75" data-nodetype="res" data-inputtype="max"/>max</p><p><input type="number" step="0.01" name="optim_resource" min="0" max="1" value="0.5" data-nodetype="res" data-inputtype="optim"/>optim</p><p><input type="number" step="0.01" name="min_resource" min="0" max="1" value="0.23" data-nodetype="res" data-inputtype="min"/>min</p></div>',
                },
                environmental_preferences_custom: {
                    name: "Env. Preferences Custom",
                    inputs: 1,
                    outputs: 1,
                    className: "trait-node",
                    data: {
                        input_1: {
                            vsInputClasses: "traits",
                        },
                        output_1: {
                            vsOutputClasses: "env_preferences",
                        }
                    },
                    html: '<div class =\'title\'>Env. Preferences Custom</div><div class=\'input-container\'><input type="text" pattern="^[a-zA-Z]+[a-zA-Z0-9._]*$" data-vs-custom-env-name placeholder="env_name"></p><p><input type="number" step="0.1" name="max" min="-1000" max="1000" value="100" data-nodetype="custom" data-inputtype="max"/>max</p><p><input type="number" step="0.1" name="optim" min="-1000" max="1000" value="50" data-nodetype="custom" data-inputtype="optim"/>optim</p><p><input type="number" step="0.1" name="min" min="-1000" max="1000" value="0" data-nodetype="custom" data-inputtype="min"/>min</p></div>',
                },
                mass: {
                    name: "Mass",
                    inputs: 1,
                    outputs: 1,
                    className: "trait-node",
                    data: {
                        input_1: {
                            vsInputClasses: "traits",
                        },
                        output_1: {
                            vsOutputClasses: "mass",
                        }
                    },
                    html: '<div class =\'title\'>Mass</div><div class=\'input-container\'><p><input type="number" name="mass" min="0.01" max="1000" step="0.01" value="1"/>initial value</p></div>',
                },
                suitability: {
                    name: "Suitability",
                    inputs: 1,
                    outputs: 1,
                    className: "trait-node",
                    data: {
                        input_1: {
                            vsInputClasses: "traits",
                        },
                        output_1: {
                            vsOutputClasses: "suitability",
                        }
                    },
                    html: '<div class =\'title\'>Suitability (0-1)</div><div class=\'input-container\'><p><input type="number" name="suitability" min="0" max="1" step="0.01" value="1"/>initial value</p></div>',
                },
            };

            function applyNodeData(nodeID) {
                allNodes.add(parseInt(nodeID));
                const node = editor.drawflow.drawflow[editor.module].data[nodeID];
                if (node.name === "Species") {
                    startNodes.add(parseInt(nodeID));

                    if (node.data.vsSpeciesName === undefined) {
                        node.data.vsSpeciesName = node.name + '_' + Math.floor(Date.now() * Math.random() / 100000).toString(16);
                    }

                    const speciesNameInput = editor.container.querySelector(
                        "#node-" + nodeID + " input[type='text']"
                    );

                    if (speciesNameInput) {
                        speciesNameInput.value = node.data.vsSpeciesName;
                        
                        speciesNameInput.addEventListener("input", function () {
                            const oldName = node.data.vsSpeciesName;

                            node.data.vsSpeciesName = this.value;
                            const connectedNodes = document.querySelectorAll('[data-vs-species-name="' + oldName + '"]');
                            connectedNodes.forEach((connectedNode) => {
                                connectedNode.dataset.vsSpeciesName = this.value;
                            });
                        });
                    } else {
                        console.error("Species node input missing: " + nodeID);
                    }

                }
                if (node.class === "env-node") {
                    startNodes.add(parseInt(nodeID));
                    const customEnvNameInput = editor.container.querySelector(
                        "#node-" + nodeID + " input[type='text']"
                    );

                    if (customEnvNameInput) {
                        customEnvNameInput.addEventListener("input", function () {
                            node.data.output_1.vsOutputClasses = node.data.output_1.vsOutputClasses.split(" ")[0] + " " + this.value;
                            const output_div = editor.container.querySelector(
                                "#node-" + nodeID + " .output_1",
                            );
                            if (output_div) {
                                output_div.dataset.vsOutputClasses = node.data.output_1.vsOutputClasses;
                            }
                        });
                    }
                }
                if (node.name === "Env. Preferences Custom") {
                    const customEnvNameInput = editor.container.querySelector(
                        "#node-" + nodeID + " input[type='text']"
                    );

                    if (customEnvNameInput) {
                        customEnvNameInput.addEventListener("input", function () {
                            node.data.output_1.vsOutputClasses = node.data.output_1.vsOutputClasses.split(" ")[0] + " " + this.value;
                            const output_div = editor.container.querySelector(
                                "#node-" + nodeID + " .output_1",
                            );
                            if (output_div) {
                                output_div.dataset.vsOutputClasses = node.data.output_1.vsOutputClasses;
                            }
                        });
                    }
                }

                // if (node.outputs.output_1 && node.data.output_1.vsOutputClasses) {
                Object.keys(node.outputs).forEach((output) => {
                        const output_div = editor.container.querySelector(
                            "#node-" + nodeID + " ." + output,
                        );
                        if (output_div && Object.hasOwn(node.data, output)) {
                            output_div.dataset.vsOutputClasses = node.data[output].vsOutputClasses;
                            output_div.dataset.vsOutputClassFixed = true;            
                        }
                });
                Object.keys(node.inputs).forEach((input) => {
                        const input_div = editor.container.querySelector(
                            "#node-" + nodeID + " ." +  input,
                        );
                        if (input_div && Object.hasOwn(node.data, input)) {
                            input_div.dataset.vsInputClasses = node.data[input].vsInputClasses;
                            input_div.dataset.vsInputClassFixed = true;
                            input_div.dataset.vsOptional = node.data[input].optional || false;
                        }
                });

                const nodeElement = editor.container.querySelector("#node-" + nodeID);
                editor.isSomethingSelected = false;
                const infoPanel = document.getElementById("node-info-panel");
                const infoTitle = infoPanel.querySelector(".title span");
                const infoBody = infoPanel.querySelector(".body");
                const infoSeeAlso = infoPanel.querySelector(".sl-link-card a");
                const infoSeeAlsoDescription = infoPanel.querySelector(".sl-link-card .description");
                const nodeInfo = node.data?.info || "";
                const dataEl = document.getElementById("glossary-data");
                const glossary = JSON.parse(dataEl.textContent);
                nodeElement.addEventListener("click", function () {
                    editor.isSomethingSelected = true;
                    infoTitle.textContent = node.name;
                    let contentText = "";
                    if (nodeInfo && glossary[nodeInfo]) {
                        contentText += glossary[nodeInfo].text.join(" ");
                        infoSeeAlso.href = glossary[nodeInfo].see_also_link;
                        infoSeeAlsoDescription.textContent = glossary[nodeInfo].see_also_text;
                    } else {
                        contentText += "No additional information available.";
                        infoSeeAlso.href = "#";
                        infoSeeAlsoDescription.textContent = "Nothing here";
                    }
                    infoBody.textContent  = contentText;
                });
            };
            
            editor.on("nodeSelected", (nodeID) => {
                if (editor.isCodePanelSmall) {return};
                if (!editor.shouldHighlightCode) {return};
                const highlightButton = document.getElementById("vs-code-highlight");
                highlightButton.dataset.hint = "disable highlighting here";
                const node = editor.drawflow.drawflow[editor.module].data[nodeID];
                let textID   = node.id;
                if (node.name === "Species") {
                    textID = "species";
                }
                if (node.name === "Temperature") {
                    textID = "temperature";
                }
                if (node.name === "Precipitation") {
                    textID = "precipitation";
                }
                if (node.name === "Resource") {
                    textID = "resource";
                }

                const codetextPosition = document.getElementById(textID);
                if (codetextPosition) {
                    codetextPosition.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    codetextPosition.classList.add("highlight");
                    setTimeout(() => {
                        codetextPosition.classList.remove("highlight");
                        highlightButton.dataset.hint = "";
                    }, 700);
                }
            });

            editor.on("nodeUnselected", (node) => {
                editor.isSomethingSelected = false;
                setTimeout(() => {
                    if (!editor.isSomethingSelected) {
                        const infoPanel = document.getElementById("node-info-panel");
                        const infoTitle = infoPanel.querySelector(".title span");
                        const infoContent = infoPanel.querySelector(".body");
                        
                        infoTitle.innerText = "Information";
                        infoContent.textContent  = "Click on any node to see more information.";
                    }
                }, 250);
            });

            editor.on("nodeCreated", (nodeID) => {
                applyNodeData(nodeID);
            });


            editor.on("nodeRemoved", (node) => {
                allNodes.delete(parseInt(node));
                startNodes.delete(parseInt(node));
            });




            // function to traverse the node tree and add attributes
            function traverseNodesAndUpdateSpeciesName(connection, data, expectedInputClass, connnectedNodes, commingfromSpecies = undefined, processPriority = 1) {

                const nodeId = connection.node;
                const connectedViaInput = connection.output;
                let new_data = {};

                const node = editor.drawflow.drawflow[editor.module].data[nodeId];
                if (!node) return;
                // if species node, pass its id to the next node, so that traits can be added
                let passSpeciesnodeId = undefined;
                if (node.name === "Species") {
                    passSpeciesnodeId = nodeId;
                }
                // if the last node was a species node, then add trait information to the species node
                if (commingfromSpecies !== undefined) {
                    const parentNode = editor.drawflow.drawflow[editor.module].data[commingfromSpecies];
                    
                    if (!Object.hasOwn(parentNode.data, "traits") || !( parentNode.data.traits instanceof Set)) {
                        parentNode.data.traits = new Set();
                    }
                    if (!parentNode.data.traits.has(node.name)) {
                        parentNode.data.traits.add(node.name);
                    }
                }


                // now setting the species name.
                // check if the node already has a name in its data, otherwise set it from the data object
                const nodeElement = editor.container.querySelector("#node-" + nodeId); 
                let inputDiv, currentPriority, nextPriority;
                if (Object.hasOwn(node.data, 'vsSpeciesName') && node.data.vsSpeciesName !== undefined) {
                    nodeElement.dataset.vsSpeciesName = node.data.vsSpeciesName;
                } else if (Object.hasOwn(data, 'vsSpeciesName') && data.vsSpeciesName !== undefined) {
                    node.data.vsSpeciesName = data.vsSpeciesName;
                    nodeElement.dataset.vsSpeciesName = data.vsSpeciesName;
                } 
                // add the species name to the new data object so that it can be passed on
                new_data.vsSpeciesName = node.data.vsSpeciesName;


                // if the node is a multi species node and input_1 is connected, take that as species name:
                const dataInput1 = node.data?.input_1;
                if (dataInput1 && dataInput1.vsSpeciesName && dataInput1.vsSpeciesName !== undefined && nodeElement.classList.contains("multi-species")) {
                    node.data.vsSpeciesName = dataInput1.vsSpeciesName;
                    nodeElement.dataset.vsSpeciesName = dataInput1.vsSpeciesName;
                }


                // add the node id to the connected nodes set
                connnectedNodes.add(parseInt(nodeId));
        





                // check and assign the priority for process nodes
                if (node.class.includes("proc-node")) {
                    currentPriority = parseInt(node.data.priority);
                    if (currentPriority === null || Number.isNaN(currentPriority) || currentPriority === undefined || currentPriority < processPriority) {
                        node.data.priority = processPriority;
                        nodeElement.dataset.priority = processPriority;
                    }
                    nextPriority = processPriority + 1;   
                }



                // assign data to the conncted input
                if (Object.hasOwn(node.inputs, connectedViaInput)) {
                    inputDiv = nodeElement.querySelector("." + connectedViaInput);          
                    if (inputDiv) {
                        if (!Object.hasOwn(node.data, connectedViaInput)) {
                            node.data[connectedViaInput] = {};
                        }
                        node.data[connectedViaInput].vsSpeciesName = data?.vsSpeciesName || node.data.vsSpeciesName;
                        inputDiv.dataset.vsSpeciesName = node.data[connectedViaInput].vsSpeciesName;


                        // settting input classes
                        node.data[connectedViaInput].upstreamConnected = data.upstreamConnected && data[connectedViaInput].upstreamConnected;
                        inputDiv.dataset.upstreamConnected = data.upstreamConnected && data[connectedViaInput].upstreamConnected;
                        
                        
                        // if the node has no input class, take it from the connected output
                        const curenntNodeInputClass = node.data[connectedViaInput].vsInputClasses;
                        if (!curenntNodeInputClass) {
                            node.data[connectedViaInput].vsInputClasses = expectedInputClass;
                            inputDiv.dataset.vsInputClasses = expectedInputClass;
                        }

                        // set environmetn type
                        if (data.env_type) {
                            node.data[connectedViaInput].env_type = data.env_type;
                            inputDiv.dataset.env_type = data.env_type;
                        }
                    }
                }


                const areAllInputsConnected = Object.keys(node.inputs).every((inputClass) => {
                    const inputLengthBiggerZero = node.inputs[inputClass].connections.length > 0;
                    const isOptional = node.data[inputClass] && node.data[inputClass].optional ? true : false;
                    const isUpstreamConntected =
                        data.upstreamConnected &&
                        Object.hasOwn(node.data, inputClass) &&
                        node.data[inputClass].upstreamConnected;
                    return (inputLengthBiggerZero && isUpstreamConntected) || isOptional;
                });
                if (areAllInputsConnected) {
                    nodeElement.dataset.upstreamConnected = true;
                    node.data.upstreamConnected = true;
                    new_data.upstreamConnected = true;
                } else {
                    nodeElement.dataset.upstreamConnected = false;
                    node.data.upstreamConnected = false;
                    new_data.upstreamConnected = false;
                }


                if (Object.hasOwn(node.outputs, "output_1")) {
                    let outputClass;
                    const outputDiv = nodeElement.querySelector(".output_1");
                    if (outputDiv) {
                        if (!Object.hasOwn(node.data, "output_1")) {
                            node.data.output_1 = {};
                        }
                        node.data.output_1.vsSpeciesName = node.data.vsSpeciesName;
                        outputDiv.dataset.vsSpeciesName = node.data.vsSpeciesName;

                        outputClass =  node.data.output_1?.vsOutputClasses;
                        if (!outputClass && connectedViaInput == "input_1") {
                            node.data.output_1.vsOutputClasses = node.data[connectedViaInput].vsInputClasses;
                                outputDiv.dataset.vsOutputClasses = inputDiv.dataset.vsInputClasses;
                        }
                        if (node.class == "env-node" || node.name === "Env. Preferences Temperature" || node.name === "Env. Preferences Precipitation" || node.name === "Env. Preferences Resource") {
                            new_data.env_type = node.name.toLowerCase().split(" ").pop();
                        }
                        if (node.class == "env-node" && node.name === "Custom Env" || node.name === "Env. Preferences Custom") {
                            new_data.env_type = node.data.output_1.vsOutputClasses.split(" ").pop();
                        }

                    }

                    if (node.outputs["output_1"].connections.length > 0) {
                        node.outputs["output_1"].connections.forEach((new_connection) => {
                            if (!new_data[new_connection.output]) {
                                new_data[new_connection.output] = {};
                            }
                            new_data[new_connection.output].upstreamConnected = true;
                            connnectedNodes.add(parseInt(new_connection.node));
                            traverseNodesAndUpdateSpeciesName(new_connection, new_data, outputClass, connnectedNodes, passSpeciesnodeId, nextPriority);
                        });
                    }

                }
            }










            // check onnections
            editor.on("connectionCreated", (connection) => {
            // make sure single connections only
                const inputNodeinfos = editor.getNodeFromId(connection.input_id);
                const outputNodeinfos = editor.getNodeFromId(connection.output_id);

                if (inputNodeinfos.inputs[connection.input_class].connections.length > 1) {
                    editor.removeSingleConnection(
                        connection.output_id,
                        connection.input_id,
                        connection.output_class,
                        connection.input_class,
                    );
                    return;
                }

                const conenctedToMoreThanOnePrimaryInput = outputNodeinfos.outputs[connection.output_class].connections.filter(
                    (con) => con.output === "input_1"
                ).length > 1;

                if (outputNodeinfos.outputs[connection.output_class].connections.length > 1 && outputNodeinfos.name !== "Species" && conenctedToMoreThanOnePrimaryInput) {
                    editor.removeSingleConnection(
                        connection.output_id,
                        connection.input_id,
                        connection.output_class,
                        connection.input_class,
                    );
                    return;
                }

            // check only nodes of compatible input /output types can be connected
                const connection_output = editor.container.querySelector(
                    "#node-" +
                        connection.output_id +
                        " .outputs ." +
                        connection.output_class,
                );
                const connection_input = editor.container.querySelector(
                    "#node-" +
                        connection.input_id +
                        " .inputs ." +
                        connection.input_class,
                );

                if (!connection_input || !connection_output) {
                    editor.removeSingleConnection(
                        connection.output_id,
                        connection.input_id,
                        connection.output_class,
                        connection.input_class,
                    );
                    return;
                }

                if (connection_input.dataset?.vsInputClassFixed) {
                    const testClassNames = connection_input.dataset?.vsInputClasses.split(" ");
                    if (
                        !connection_output.dataset?.vsOutputClasses ||
                        !connection_output.dataset?.vsOutputClasses.split(" ").some(inClass => testClassNames.includes(inClass))
                    ) {
                        editor.removeSingleConnection(
                            connection.output_id,
                            connection.input_id,
                            connection.output_class,
                            connection.input_class,
                        );
                    }
                }

                if (editor.drawflow.drawflow[editor.module].data[connection.output_id].traits !== undefined) {
                    if (editor.drawflow.drawflow[editor.module].data[connection.output_id].traits.has(inputNodeinfos.name)) {
                        editor.removeSingleConnection(
                            connection.output_id,
                            connection.input_id,
                            connection.output_class,
                            connection.input_class,
                        );
                    }
                }

                if (Object.hasOwn(outputNodeinfos.data, 'vsSpeciesName')) {
                    const inNode = editor.container.querySelector("#node-" + connection.input_id);
                   // if input node has a different species_name remove all other input connections

                    const currentSpeciesName = inNode.dataset.vsSpeciesName;
                    if (currentSpeciesName && currentSpeciesName !== outputNodeinfos.data.vsSpeciesName && inNode.classList.contains("single-species")) {
                        // remove all connections to the other inputs on the same node
                        for (const input in inputNodeinfos.inputs) {
                            if (input === connection.input_class) {
                                continue;
                            }

                            if (inputNodeinfos.inputs[input].connections.length === 0) {
                                continue;
                            }
                            // remove the connection
                            editor.removeSingleConnection(
                                inputNodeinfos.inputs[input].connections[0].node,
                                connection.input_id, 
                                inputNodeinfos.inputs[input].connections[0].input,
                                input,
                            );
                        }
                    }
                }

                if (inputNodeinfos.name === "Metabolic Scaling" &&
                    connection_output.dataset?.vsOutputClasses !== "reproduction_rate" &&
                    connection_output.dataset?.vsOutputClasses !== "carrying_capacity" &&
                    connection.input_class === "input_1"
                ) {
                    editor.removeSingleConnection(
                        connection.output_id,
                        connection.input_id,
                        connection.output_class,
                        connection.input_class,
                    );
                    return;
                }


                if ((inputNodeinfos.name === "Multiply With") &&
                    (connection_output.dataset?.vsOutputClasses === "env_preferences" || connection_output.dataset?.vsOutputClasses === "dispersal_distance") ||
                    (connection_output.dataset.vsOutputClasses && connection_output.dataset?.vsOutputClasses.includes("env_values") && connection.input_class === "input_1")
                ) {
                    editor.removeSingleConnection(
                        connection.output_id,
                        connection.input_id,
                        connection.output_class,
                        connection.input_class,
                    );
                    return;
                }



                // now check all nodes that are single species input only and remove all other connections
                const singleSpeciesNodes = editor.container.querySelectorAll(
                    ".drawflow-node.single-species",
                );

               allNodes.forEach((id) => {
                    const node = editor.drawflow.drawflow[editor.module].data[id];
                    const speciesName = node.data.vsSpeciesName;
                    if (!speciesName) {
                        return;
                    }
                    for (const [key, value] of Object.entries(node.inputs)) {
                        const inputSpeciesName = Object.hasOwn(node.data, key) ? node.data[key]?.vsSpeciesName : undefined;
                        if (inputSpeciesName && inputSpeciesName !== speciesName) {
                            editor.removeSingleConnection(
                                value.connections[0].node,
                                node.id,
                                value.connections[0].input,
                                key
                            );
                        }

                            
                    };
                });

                let connnectedNodes = new Set();
                for (const nodeId of startNodes) {
                    traverseNodesAndUpdateSpeciesName({node: nodeId, output: "input_1"}, {}, "input_1", connnectedNodes);
                }

                let unconnectedNodes = new Set(
                    [...allNodes].filter((id) => !connnectedNodes.has(id)),
                );

                for (const nodeId of unconnectedNodes) {

                    const nodeElement = editor.container.querySelector("#node-" + nodeId);
                    if (nodeElement) {
                        nodeElement.removeAttribute("data-vs-species-name");
                        nodeElement.removeAttribute("data-upstream-connected");
                        editor.drawflow.drawflow[editor.module].data[nodeId].data.vsSpeciesName = undefined;
                        editor.drawflow.drawflow[editor.module].data[nodeId].data.upstreamConnected = false;
                    }
                }

            });

            editor.on("connectionRemoved", (connection) => {

                const inputNodeInputDiv = editor.container.querySelector(
                    "#node-" + connection.input_id + " .inputs ." + connection.input_class,
                );
                if (inputNodeInputDiv) {
                    inputNodeInputDiv.removeAttribute("data-vs-species-name");
                }
                if (inputNodeInputDiv && !inputNodeInputDiv.dataset?.vsInputClassFixed) {
                    inputNodeInputDiv.removeAttribute("data-vs-input-classes");
                }
                if (connection.input_class === "input_1") {
                    const inputNodeouputDiv = editor.container.querySelector(
                        "#node-" + connection.input_id + " .outputs .output_1",
                    );
                    if (inputNodeouputDiv && !inputNodeouputDiv.dataset?.vsOutputClassFixed) {
                        inputNodeouputDiv.removeAttribute("data-vs-output-classes");
                    }
                }

               if (editor.drawflow.drawflow[editor.module].data[connection.output_id].traits !== undefined) {
                    editor.drawflow.drawflow[editor.module].data[connection.output_id].traits.delete(
                        editor.drawflow.drawflow[editor.module].data[connection.input_id].name
                    );
                }

                let deadNodes = new Set();
                traverseNodesAndUpdateSpeciesName({node: connection.input_id, output: connection.input_class}, {}, connection.input_class, deadNodes);

                let connnectedNodes = new Set();
                for (const nodeId of startNodes) {
                    traverseNodesAndUpdateSpeciesName({node: nodeId, output: "input_1"}, {}, "input_1", connnectedNodes);
                }
                let unconnectedNodes = new Set(
                    [...allNodes].filter((id) => !connnectedNodes.has(id)),
                );
                for (const nodeId of unconnectedNodes) {
                    const nodeElement = editor.container.querySelector("#node-" + nodeId);
                    if (nodeElement) {
                        nodeElement.removeAttribute("data-vs-species-name");
                        nodeElement.removeAttribute("data-upstream-connected");
                        const nodeFromWhichToDelte = editor.drawflow.drawflow[editor.module].data[nodeId].data;
                        delete nodeFromWhichToDelte.vsSpeciesName;
                        delete nodeFromWhichToDelte.upstreamConnected;

                        const inputs = nodeElement.querySelectorAll(".inputs .input");
                        inputs.forEach((input) => {
                            if (input.dataset?.vsInputClassFixed) {
                                return;
                            }
                            input.removeAttribute("data-vs-input-classes");
                            input.removeAttribute("data-vs-species-name");
                            const key = input.classList.item(1);
                            if (nodeFromWhichToDelte[key] && typeof nodeFromWhichToDelte[key] === 'object' && !Array.isArray(nodeFromWhichToDelte[key])) {
                                delete nodeFromWhichToDelte[key].vsSpeciesName;
                                delete nodeFromWhichToDelte[key].upstreamConnected;
                                delete nodeFromWhichToDelte[key].vsInputClasses;
                            }
                        });
                        const outputs = nodeElement.querySelectorAll(".outputs .output");
                        outputs.forEach((output) => {
                            if (output.dataset?.vsOutputClassFixed) {
                                return;
                            }
                            output.removeAttribute("data-vs-output-classes");
                            const key = output.classList.item(1);
                            if (nodeFromWhichToDelte[key] && typeof nodeFromWhichToDelte[key] === 'object' && !Array.isArray(nodeFromWhichToDelte[key])) {
                                delete nodeFromWhichToDelte[key].vsSpeciesName;
                                delete nodeFromWhichToDelte[key].upstreamConnected;
                                delete nodeFromWhichToDelte[key].vsOutputClasses;
                            }
                        });
                    }
                }
            });



            // Drag-and-drop node creation from menu
            document.querySelectorAll(".vs-menu-item").forEach((item) => {
                item.addEventListener("dragstart", function (e) {
                    e.dataTransfer.setData(
                        "node-type",
                        this.dataset.nodeType
                    );
                });
            });
            drawflowContainer.addEventListener("dragover", function (e) {
                e.preventDefault();
            });
            drawflowContainer.addEventListener("drop", function (e) {
                e.preventDefault();
                const nodeType = e.dataTransfer.getData("node-type")
                if (nodeType) {
                    const conf = structuredClone(nodeConfig[nodeType]);
                    if (conf) {
                        const x = -80  + e.clientX * ( editor.precanvas.clientWidth / (editor.precanvas.clientWidth * editor.zoom)) - (editor.precanvas.getBoundingClientRect().x * ( editor.precanvas.clientWidth / (editor.precanvas.clientWidth * editor.zoom)));
                        const y = -40 +e.clientY * ( editor.precanvas.clientHeight / (editor.precanvas.clientHeight * editor.zoom)) - (editor.precanvas.getBoundingClientRect().y * ( editor.precanvas.clientHeight / (editor.precanvas.clientHeight * editor.zoom)));
                        editor.addNode(
                            conf.name,
                            conf.inputs,
                            conf.outputs,
                            x,
                            y,
                            conf.className,
                            conf.data,
                            conf.html
                        );
                    }
                }
            });

            // Update code panel when nodes or connections change
            function updateCodePanel() {
                const nodes = Object.values(
                    editor.drawflow.drawflow[editor.module].data,
                );
                let code = [];
                code.push({                   
                    tag: 'start',
                    text: `library(metaRange)\nlibrary(terra)\nset_verbosity(2)\n\n`,
                    prio: 0
                });

                // If we have an environment node, we need to create the environment setup code
                const envNodes = nodes.filter(
                    (node) => node.class === "env-node",
                );
                let uniqueEnv,
                    envNames, 
                    envNamesLabel,
                    uniqueEnvArr;
                uniqueEnv = new Set(envNodes.map((node) => node.name));
                if (envNodes.length > 0) {
                    code.push({
                        tag: '',
                        text: `#### Setup of the environment: #### (replace this with your own data)\n`,
                        prio: 1
                    });



                    if (envNodes.some((node) => node.name === "Temperature")) {
                        code.push({                       
                            tag: 'temperature',
                            text: `temperature <- rast(volcano + 150)\n`,
                            prio: 2
                        });
                    }
                    if (envNodes.some((node) => node.name === "Precipitation")) {
                        code.push({
                            tag: 'precipitation',
                            text: `precipitation <- rast(volcano * 4)\n`,
                            prio: 3
                        });
                    }
                    if (envNodes.some((node) => node.name === "Resource")) {
                        code.push({
                            tag: 'resource',
                            text: `resource <- rast((volcano - min(volcano)) / (max(volcano) -min(volcano)))\n`,
                            prio: 4
                        });
                    }

                    

                    custom_env_nodes = envNodes.filter((node) => node.name === "Custom Env");
                    let custom_name = "custom_env";
                    custom_env_nodes.forEach((node, index) => {
                        uniqueEnv.delete("Custom Env");
                        if (node.data.output_1 && node.data.output_1.vsOutputClasses) {
                            custom_name = node.data.output_1.vsOutputClasses.split(" ").pop();
                            uniqueEnv.add(custom_name);
                            code.push({
                                tag: node.id,
                                text: `${custom_name} <- rast(volcano)\n`,
                                prio: 5
                            });
                        }
                    });

                } else {
                    envNames = "spatial_grid";
                    envNamesLabel = "spatial_grid";
                    code.push({
                        tag: '',
                        text: `spatial_grid <- rast(volcano)\n`,
                        prio: 5
                    });
                }
                uniqueEnvArr = [...uniqueEnv];
                envNames = uniqueEnvArr
                    .join(", ")
                    .toLowerCase();
                envNamesLabel = uniqueEnvArr
                    .join("', '")
                    .toLowerCase();
                code.push({
                    tag: '',
                    text:
                        `landscape <- sds(${envNames})\n`+
                        `names(landscape) <- c('${envNamesLabel}')\n\n`+
                        `#### Create the simulation object\n`+
                        `sim <- create_simulation(landscape)\n\n`,
                    prio: 6
                });


                
                const startNodes = nodes.filter(
                    (node) => node.class === "species-node",
                );
                let speciesNames = startNodes
                    .map((node) => node.data?.vsSpeciesName);

                const customEnvPreferencesNodeIDs = nodes.filter(
                    (node) => node.name === "Env. Preferences Custom",
                ).map((node) => node.id);
                // startNodes
                if (startNodes.length > 0) {

                    code.push({
                        tag: '',
                        text:'#### Add Species: ####\n',
                        prio: 7
                    });
                    speciesNames = speciesNames
                        .map((name) => name)
                        .join("', '");
                    code.push({
                        tag: "species",
                        text: `sim$add_species(c('${speciesNames}'))\n\n`,
                        prio: 8                  
                    });

                    code.push({
                        tag: '',
                        text: `#### Add traits: ####\n`,
                        prio: 9          
                    });

                    startNodes.forEach((node) => {

                        if (node.outputs.output_1) {
                            for (const output of node.outputs.output_1.connections) {
                                let id = output.node;
                                let traitValue = editor.container.querySelectorAll(
                                    "#node-" + id + ' input[type="number"]',
                                );

                                let custom_env_value = "";
                                if (customEnvPreferencesNodeIDs.includes(parseInt(id))) {
                                    custom_env_value = editor.container.querySelectorAll(
                                        "#node-" + id + ' input[type="text"]'
                                        )[0].value;
                                }
                                traitValue.forEach((input) => {
                                    if (input.name === "dispersal_distance") {                                      
                                        code.push({
                                            tag: id,
                                            text: 
                                                `sim$add_traits(\n`+
                                                `    "${node.data?.vsSpeciesName}",\n`+
                                                `    population_level = FALSE,\n`+
                                                `    dispersal_kernel = calculate_dispersal_kernel(\n`+
                                                `        max_dispersal_dist = ${input.value * 2},\n`+
                                                `        kfun = negative_exponential_function,\n`+
                                                `        mean_dispersal_dist = ${input.value}\n`+
                                                `    )\n`+
                                                `)\n`,
                                            prio: 9          
                                        });

                                    } else if (custom_env_value != "") {
                                        code.push({
                                            tag: '' + input.name + "_" + custom_env_value,
                                            text: `sim$add_traits("${node.data?.vsSpeciesName || node.name}", ${input.name + "_" + custom_env_value} =  ${input.value})\n`,
                                            prio: 9
                                        });
                                        
                                    } else {
                                        code.push({
                                            tag: id,
                                            text: `sim$add_traits("${node.data?.vsSpeciesName || node.name}", ${input.name} =  ${input.value})\n`,
                                            prio: 9
                                        });
                                    }
                                    if (input.name === "reproduction_rate" || input.name === "carrying_capacity") {
                                        code.push({
                                            tag: '',
                                            text: `sim$add_traits("${node.data?.vsSpeciesName || node.name}", initial_${input.name} =  ${input.value})\n`,
                                            prio: 9
                                        });
                                    }
                                });
                            }
                        }
                    });

                    const process_nodes = nodes.filter(
                        (node) => node.class.includes("proc-node")
                    );
                    const suitability_nodes = process_nodes.filter(
                        (node) => node.name === "Calculate Suitability"
                    );
                    // filter for node id where the node has the lowest node.data?.priority 
                    const min_suitability_priority = Math.min(...suitability_nodes.map((node) => node.data?.priority || Infinity));
                    let first_suitability_node = suitability_nodes.filter((node) => node.data?.priority === min_suitability_priority)[0]?.id;

                    if (process_nodes.length > 0) { 
                        process_nodes.forEach((node) => {

                            if (!node.data.vsSpeciesName || !node.data.upstreamConnected) {
                                return;
                            }
                            let abundance_input, 
                                reproduction_rate_input,
                                carrying_capacity_input,
                                dispersal_distance_input,
                                weights_input,
                                survival_rate_input;
                            if (node.name === "Reproduction Ricker" &&
                                node.inputs.input_1?.connections[0] &&
                                node.inputs.input_2?.connections[0] &&
                                node.inputs.input_3?.connections[0]
                            ) {
                                abundance_input = node.inputs.input_1?.connections[0] ? "self$traits$abundance" : "node_not_connected";
                                reproduction_rate_input = node.inputs.input_2?.connections[0] ? "self$traits$reproduction_rate" : "node_not_connected";
                                carrying_capacity_input = node.inputs.input_3?.connections[0] ? "self$traits$carrying_capacity" : "node_not_connected";

                                code.push({
                                    tag: node.id,
                                    text:
                                        `sim$add_process(\n`+
                                        `    species = "${node.data?.vsSpeciesName}",\n`+
                                        `    process_name = "reproduction",\n`+
                                        `    process_fun = function() {\n`+
                                        `        self$traits$abundance <-\n`+
                                        `            ricker_reproduction_model(\n`+
                                        `                abundance = ${abundance_input},\n`+
                                        `                reproduction_rate = ${reproduction_rate_input},\n`+
                                        `                carrying_capacity = ${carrying_capacity_input}\n`+
                                        `            )\n`+
                                        `    },\n`+
                                        `    execution_priority = ${node.data?.priority || 1}\n`+
                                        `)\n`,
                                    prio: node.data?.priority + 100
                                });
                            }

                            if (node.name === "Reproduction Beverton-Holt" &&
                                node.inputs.input_1?.connections[0] &&
                                node.inputs.input_2?.connections[0] &&
                                node.inputs.input_3?.connections[0]
                            ) {
                                abundance_input = node.inputs.input_1?.connections[0] ? "self$traits$abundance" : "node_not_connected";
                                reproduction_rate_input = node.inputs.input_2?.connections[0] ? "self$traits$reproduction_rate" : "node_not_connected";
                                carrying_capacity_input = node.inputs.input_3?.connections[0] ? "self$traits$carrying_capacity" : "node_not_connected";
                                survival_rate_input = node.inputs.input_4?.connections[0] ? "self$traits$survival_rate" : "node_not_connected";
                                
                                code.push({
                                    tag: node.id,
                                    text:
                                        `sim$add_process(\n`+
                                        `    species = "${node.data?.vsSpeciesName}",\n`+
                                        `    process_name = "reproduction",\n`+
                                        `    process_fun = function() {\n`+
                                        `        abundance <- ${abundance_input} * ${survival_rate_input}\n`+
                                        `        abundance_t1 <- (${reproduction_rate_input} * abundance) /\n`+
                                        `            (1 + ((${reproduction_rate_input} - 1) / ${carrying_capacity_input}) * abundance)\n`+
                                        `        abundance_t1[abundance_t1 < 0] <- 0\n`+
                                        `        ${abundance_input} <- abundance_t1\n`+
                                        `    },\n`+
                                        `    execution_priority = ${node.data?.priority || 1}\n`+
                                        `)\n`,
                                    prio: node.data?.priority + 100
                                });
                            }

                            if (node.name === "Mortality" &&
                                node.inputs.input_1?.connections[0] &&
                                node.inputs.input_2?.connections[0]
                            ) {
                                abundance_input = node.inputs.input_1?.connections[0] ? "self$traits$abundance" : "node_not_connected";
                                survival_rate_input = node.inputs.input_2?.connections[0] ? "self$traits$survival_rate" : "node_not_connected";

                                code.push({
                                    tag: node.id,
                                    text:
                                        `sim$add_process(\n`+
                                        `    species = "${node.data?.vsSpeciesName}",\n`+
                                        `    process_name = "mortality",\n`+
                                        `    process_fun = function() {\n`+
                                        `        self$traits$abundance <-\n`+
                                        `            matrix(rpois(\n`+
                                        `                length(${abundance_input}),\n`+
                                        `                ${abundance_input} * ${survival_rate_input}\n`+
                                        `            ), nrow = nrow(self$traits$abundance), ncol = ncol(self$traits$abundance))\n`+
                                        `    },\n`+
                                        `    execution_priority = ${node.data?.priority || 1}\n`+
                                        `)\n`,
                                    prio: node.data?.priority + 100
                                });
                            }

                            if (node.name === "Dispersal" &&
                                node.inputs.input_1?.connections[0] &&
                                node.inputs.input_2?.connections[0]
                            ) {
                                abundance_input = node.inputs.input_1?.connections[0] ? "self$traits$abundance" : "node_not_connected";
                                dispersal_distance_input = node.inputs.input_2?.connections[0] ? "self$traits$dispersal_kernel" : "node_not_connected";
                                let continueFunction = node.inputs.input_3?.connections[0] ? "," : "";
                                weights_input = node.inputs.input_3?.connections[0] ? 'self$traits$suitability' : null;

                                code.push({
                                    tag: node.id,
                                    text:
                                        `sim$add_process(\n`+
                                        `    species = "${node.data?.vsSpeciesName}",\n`+
                                        `    process_name = "dispersal_process",\n`+
                                        `    process_fun = function() {\n`+
                                        `        self$traits$abundance <-\n`+
                                        `            dispersal(\n`+
                                        `               abundance = ${abundance_input},\n`+
                                        `               dispersal_kernel = ${dispersal_distance_input}${continueFunction}\n`+
                                        (weights_input ? `               weights = ${weights_input}\n`: "")+
                                        `            )\n`+
                                        `    },\n`+
                                        `    execution_priority = ${node.data?.priority || 1}\n`+
                                        `)\n`,
                                    prio: node.data?.priority + 100
                                });
                            }

                            if (node.name === "Calculate Suitability" &&
                                node.inputs.input_1?.connections[0] &&
                                node.inputs.input_2?.connections[0] &&
                                node.inputs.input_3?.connections[0]
                            ) {
                                const env_type = editor.container.querySelector("#node-" + node.id + ' .input_3').dataset.env_type;
                                const env_pref_type = editor.container.querySelector("#node-" + node.id + ' .input_2').dataset.env_type;

                                code.push({
                                    tag: node.id,
                                    text:
                                        `sim$add_process(\n`+
                                        `    species = "${node.data?.vsSpeciesName}",\n`+
                                        `    process_name = "calculate_suitability",\n`+
                                        `    process_fun = function() {\n`+
                                        `        self$traits$suitability <-\n`+
                                        (node.id !== first_suitability_node ? `            self$traits$suitability *\n`:"")+
                                        `            calculate_suitability(\n`+
                                        `                vmax = self$traits$max_${env_pref_type},\n`+
                                        `                vopt = self$traits$optim_${env_pref_type},\n`+
                                        `                vmin = self$traits$min_${env_pref_type},\n`+
                                        `                venv = self$sim$environment$current$${env_type}\n`+
                                        `            )\n`+
                                        `    },\n`+
                                        `    execution_priority = ${node.data?.priority || 1}\n`+
                                        `)\n`,
                                    prio: node.data?.priority + 100
                                });
                            }

                            if (node.name === "Metabolic Scaling" &&
                                node.inputs.input_1?.connections[0] &&
                                node.inputs.input_2?.connections[0] &&
                                node.inputs.input_3?.connections[0]
                            ) {
                                // TODO
                                // could be removed by data attrib
                                const mte_type = editor.container.querySelector("#node-" + node.id + ' .input_1').dataset.vsInputClasses;
                                let scaling_exponent, E_val, ftype;

                                if (mte_type === "reproduction_rate") {
                                    scaling_exponent = "-1/4";
                                    E_val = "-0.65";
                                    ftype = "max("
                                } else if (mte_type === "carrying_capacity") {
                                    scaling_exponent = "-3/4";
                                    E_val = "0.65";                                    
                                    ftype = "min("
                                }

                                code.push({
                                    tag: node.id,
                                    text:
                                        `sim$add_process(\n`+
                                        `    species = "${node.data?.vsSpeciesName}",\n`+
                                        `    process_name = "metabolic_scaling_${mte_type}",\n`+
                                        `    process_fun = function() {\n`+
                                        `        normalization_constant <- calculate_normalization_constant(\n`+
                                        `            parameter_value = mean(self$traits$initial_${mte_type}, na.rm=TRUE),\n`+
                                        `            scaling_exponent = ${scaling_exponent},\n`+
                                        `            mass = mean(self$traits$mass, na.rm = TRUE),\n`+
                                        `            reference_temperature = ${ftype}self$sim$environment$current[["temperature"]], na.rm=TRUE),\n`+
                                        `            E = ${E_val}\n`+
                                        `        )\n`+
                                        `        self$traits[["${mte_type}"]] <- metabolic_scaling(\n`+
                                        `            normalization_constant = normalization_constant,\n`+
                                        `            scaling_exponent = ${scaling_exponent},\n`+
                                        `            mass = self$traits$mass,\n`+
                                        `            temperature = self$sim$environment$current[["temperature"]],\n`+
                                        `            E = ${E_val}\n`+
                                        `        )\n`+
                                        `    },\n`+
                                        `    execution_priority = ${node.data?.priority || 1}\n`+
                                        `)\n`,
                                    prio: node.data?.priority + 100
                                });
                            }
                            if (node.name === "Save" &&
                                node.inputs.input_1?.connections[0]
                            ) {
                                const save_node = editor.getNodeFromId(node.inputs.input_1.connections[0].node);
                                // TODO
                                // could be removed by data attrib
                                const trait_name = editor.container.querySelector("#node-" + node.id + ' .input_1').dataset.vsInputClasses;
                                let path = editor.container.querySelector("#node-" + node.id + ' input[type="text"]').value;
                                path = path !== "" ? path : "getwd()";

                                code.push({
                                    tag: node.id,
                                    text:
                                        `sim$add_process(\n`+
                                        `    species = "${node.data?.vsSpeciesName}",\n`+
                                        `    process_name = "saving_${save_node.data?.vsSpeciesName}_${trait_name}",\n`+
                                        `    process_fun = function() {\n`+
                                        `        save_species(\n`+
                                        `            x = sim$${save_node.data?.vsSpeciesName},\n`+
                                        `            traits = "${trait_name}",\n`+
                                        `            prefix =  paste0(self$sim$get_current_time_step(), "-"),\n`+
                                        `            path = ${path}\n`+
                                        `        )\n`+
                                        `    },\n`+
                                        `    execution_priority = ${node.data?.priority || 1}\n`+
                                        `)\n`,
                                    prio: node.data?.priority + 100
                                });
                            }

                            if (node.name === "Plot" &&
                                node.inputs.input_1?.connections[0]
                            ) {
                                // TODO
                                // could be removed by data attrib
                                const plot_node = editor.getNodeFromId(node.inputs.input_1.connections[0].node);
                                const trait_name = editor.container.querySelector("#node-" + node.id + ' .input_1').dataset.vsInputClasses;

                                code.push({
                                    tag: node.id,
                                    text:
                                        `sim$add_process(\n`+
                                        `    species = "${node.data?.vsSpeciesName}",\n`+
                                        `    process_name = "plotting_${plot_node.data?.vsSpeciesName}_${trait_name}",\n`+
                                        `    process_fun = function() {\n`+
                                        `        plot_cols <- hcl.colors(100, "Purple-Yellow", rev = TRUE)\n`+
                                        `        plot(\n`+
                                        `            sim$${plot_node.data?.vsSpeciesName},\n`+
                                        `            trait = "${trait_name}",\n`+
                                        `            main = "${plot_node.data?.vsSpeciesName} : ${trait_name}",\n`+
                                        `            col = plot_cols\n`+
                                        `        )\n`+
                                        `    },\n`+
                                        `    execution_priority = ${node.data?.priority || 1}\n`+
                                        `)\n`,
                                    prio: node.data?.priority + 100
                                });
                            }
                            if (node.name === "Multiply With" &&
                                node.inputs.input_1?.connections[0] &&
                                node.inputs.input_2?.connections[0]
                            ) {
                                const input_one = editor.container.querySelector("#node-" + node.id + ' .input_1').dataset;
                                const input_two = editor.container.querySelector("#node-" + node.id + ' .input_2').dataset;
                                let ioNameOne = input_one.vsInputClasses ? input_one.vsInputClasses.replace(" ", "_") : "";
                                let  ioNameTwo = input_two.vsInputClasses ? input_two.vsInputClasses.replace(" ", "_") : "";
                                if (ioNameOne === "" || ioNameTwo === "") {
                                    return;
                                }
                                let textToAdd = "";
                                textToAdd +=  `sim$add_process(\n`;
                                textToAdd +=  `    species = "${node.data?.vsSpeciesName}",\n`;
                                textToAdd +=  `    process_name = "multiply_${ioNameOne}_with_${ioNameTwo}",\n`;
                                textToAdd +=  `    process_fun = function() {\n`;
                                if (input_two.vsSpeciesName === input_one.vsSpeciesName && input_two.env_type === undefined) {
                                textToAdd +=  `        self$traits$${ioNameOne} <-\n`;
                                textToAdd +=  `            self$traits$${ioNameOne} *\n`;
                                textToAdd +=  `            self$traits$${ioNameTwo}\n`; 
                                } else if (input_two.vsSpeciesName !== input_one.vsSpeciesName && input_two.env_type === undefined) {
                                textToAdd +=  `        self$traits$${ioNameOne} <-\n`;
                                textToAdd +=  `            self$traits$${ioNameOne} *\n`;
                                textToAdd +=  `            self$sim$${input_two.vsSpeciesName}$traits$${ioNameTwo}\n`; 
                                } else if (input_two.env_type !== undefined) {
                                textToAdd +=  `        self$traits$${ioNameOne} <-\n`;
                                textToAdd +=  `            self$traits$${ioNameOne} *\n`;
                                textToAdd +=  `            self$sim$environment$current$${input_two.env_type}\n`; 
                                }
                                textToAdd +=  `    },\n`;
                                textToAdd +=  `    execution_priority = ${node.data?.priority || 1}\n`;
                                textToAdd +=  `)\n`;

                                code.push({
                                    tag: node.id,
                                    text: textToAdd,
                                    prio: node.data?.priority + 100
                                });
                            }
                        });   
                    }
                }

                code.push({
                    tag: '',
                    text:
                        `\n#### Run the simulation: ####\n`+
                        `sim$set_time_layer_mapping(rep(1, 10))\n`+
                        `sim$begin()\n`,
                    prio: 999
                });
                code.sort((a, b) => a.prio - b.prio);
                let combindedCodeWithTags = "";
                let pureTextCode = "";
                code.forEach((codeChunk) => {
                    combindedCodeWithTags += '<span id="' + codeChunk.tag + '">' + codeChunk.text + '</span>';
                    pureTextCode += codeChunk.text;
                });
                codeOutputElem.innerHTML = combindedCodeWithTags;

                const copyButton = document.querySelector("#code-area .copy button");
                if (copyButton) {
                    copyButton.dataset.code = pureTextCode;
                }
            }
            editor.on("nodeCreated", updateCodePanel);
            editor.on("nodeRemoved", updateCodePanel);
            editor.on("nodeUnselected", updateCodePanel);
            editor.on("connectionCreated", updateCodePanel);
            editor.on("connectionRemoved", updateCodePanel);
            updateCodePanel();
        }



        editor.shouldHighlightCode = true;
        const codeHighlightToggle = document.getElementById("vs-code-highlight");
        codeHighlightToggle.addEventListener("click", function () {
            if (editor.shouldHighlightCode) {
                editor.shouldHighlightCode = false;
                codeHighlightToggle.classList.remove("enabled");
            } else {
                editor.shouldHighlightCode = true; 
                codeHighlightToggle.classList.add("enabled");
            }
        });

        const codeToggle = document.getElementById("vs-code-toggle");

        codeToggle.addEventListener("click", function () {
            const vsContainer = document.querySelector(".visual-scripting-container");
            const codeArea = document.getElementById("code-area");
            if (editor.isCodePanelSmall) {
                codeToggle.classList.remove("small");
                editor.isCodePanelSmall = false;
                vsContainer.style.gridTemplateRows = "1fr 7px 1fr";
            } else {
                codeToggle.classList.add("small");
                editor.isCodePanelSmall = true;
                codeArea.scrollTop = 0;
                // codeArea.scrollIntoView({block: "start", inline: "nearest", behavior: "smooth"});
                vsContainer.style.gridTemplateRows = "1fr 7px 0.1fr";
            }
        });


        // const inputToggle = document.getElementById("vs-input-toggle");
        // inputToggle.addEventListener("click", function () {
        //     const inputs = document.querySelectorAll(
        //         ".drawflow-node .input-container",
        //     );

        //     if (inputToggle.dataset.hidden === "true") {
        //         inputToggle.dataset.hidden = "false";
        //         inputs.forEach((input) => {
        //             input.classList.remove("hidden");
        //         });
        //     } else {
        //         inputToggle.dataset.hidden = "true";
        //         inputs.forEach((input) => {
        //             input.classList.add("hidden");
        //         });
        //     }
        //     const allNodes = document.querySelectorAll(
        //         "#drawflow .drawflow-node",
        //     );
        //     allNodes.forEach((node) => {
        //         editor.updateConnectionNodes(node.id);
        //     });
        // });

        const zoomInButton = document.getElementById("vs-zoom-in");
        zoomInButton.addEventListener("click", function () {
            editor.zoom_in();
        });
        const zoomOutButton = document.getElementById("vs-zoom-out");
        zoomOutButton.addEventListener("click", function () {
            editor.zoom_out();
        });

        const helpButton = document.getElementById("vs-help");
        helpButton.addEventListener("click", function () {
            const InstuctionsTab = document.querySelector(
                'ul[role="tablist"] li:nth-child(2) a',
            );
            InstuctionsTab.click();
        });

        const tablist = document.querySelector('ul[role="tablist"]');
        tablist.addEventListener("click", function () {
            const codeToggle = document.getElementById("vs-code-toggle");
            if (editor.isCodePanelSmall) {
                codeToggle.click();
            } 
        });
    });
</script>
